
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000378e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000378e  00003822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f7  00800088  00800088  0000384a  2**0
                  ALLOC
  3 .stab         00004aa0  00000000  00000000  0000384c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b03  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000adef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000af2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b09f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dbd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e980  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ed6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f53b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*tasks codes prototypes */
 void task1_code(void*pvParamter);
 void task2_code(void*pvParamter);

int main(void)
{
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
	/*initialize LCD*/
	lcd_init();	
     b5c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <lcd_init>
	/*Creat tasks*/
	xTaskCreate(task1_code,NULL,85,NULL,TASK1_PRIORITY,NULL);
     b60:	80 ee       	ldi	r24, 0xE0	; 224
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	45 e5       	ldi	r20, 0x55	; 85
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	03 e0       	ldi	r16, 0x03	; 3
     b72:	ee 24       	eor	r14, r14
     b74:	ff 24       	eor	r15, r15
     b76:	cc 24       	eor	r12, r12
     b78:	dd 24       	eor	r13, r13
     b7a:	aa 24       	eor	r10, r10
     b7c:	bb 24       	eor	r11, r11
     b7e:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskGenericCreate>
	xTaskCreate(task2_code,NULL,configMINIMAL_STACK_SIZE,NULL,TASK2_PRIORITY,NULL);
     b82:	89 e6       	ldi	r24, 0x69	; 105
     b84:	96 e0       	ldi	r25, 0x06	; 6
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	45 e5       	ldi	r20, 0x55	; 85
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	02 e0       	ldi	r16, 0x02	; 2
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	cc 24       	eor	r12, r12
     b9a:	dd 24       	eor	r13, r13
     b9c:	aa 24       	eor	r10, r10
     b9e:	bb 24       	eor	r11, r11
     ba0:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskGenericCreate>
	/*start Scheduler */
	vTaskStartScheduler();
     ba4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vTaskStartScheduler>
	
	return 0;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
    
}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	08 95       	ret

00000bc0 <task1_code>:

/*Task1 Code */
 void task1_code(void*pvParamter)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	60 97       	sbiw	r28, 0x10	; 16
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	98 8b       	std	Y+16, r25	; 0x10
     bd6:	8f 87       	std	Y+15, r24	; 0x0f
	
	for (;;)
	{
		lcd_clrScreen();
     bd8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <lcd_clrScreen>
		lcd_dispString("I am Task 1");
     bdc:	80 e6       	ldi	r24, 0x60	; 96
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <lcd_dispString>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e4       	ldi	r25, 0x40	; 64
     be8:	ac e1       	ldi	r26, 0x1C	; 28
     bea:	b6 e4       	ldi	r27, 0x46	; 70
     bec:	8b 87       	std	Y+11, r24	; 0x0b
     bee:	9c 87       	std	Y+12, r25	; 0x0c
     bf0:	ad 87       	std	Y+13, r26	; 0x0d
     bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a e7       	ldi	r20, 0x7A	; 122
     c02:	53 e4       	ldi	r21, 0x43	; 67
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	8f 83       	std	Y+7, r24	; 0x07
     c0e:	98 87       	std	Y+8, r25	; 0x08
     c10:	a9 87       	std	Y+9, r26	; 0x09
     c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c14:	6f 81       	ldd	r22, Y+7	; 0x07
     c16:	78 85       	ldd	r23, Y+8	; 0x08
     c18:	89 85       	ldd	r24, Y+9	; 0x09
     c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e8       	ldi	r20, 0x80	; 128
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c28:	88 23       	and	r24, r24
     c2a:	2c f4       	brge	.+10     	; 0xc36 <task1_code+0x76>
		__ticks = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	3f c0       	rjmp	.+126    	; 0xcb4 <task1_code+0xf4>
	else if (__tmp > 65535)
     c36:	6f 81       	ldd	r22, Y+7	; 0x07
     c38:	78 85       	ldd	r23, Y+8	; 0x08
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	3f ef       	ldi	r19, 0xFF	; 255
     c42:	4f e7       	ldi	r20, 0x7F	; 127
     c44:	57 e4       	ldi	r21, 0x47	; 71
     c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	4c f5       	brge	.+82     	; 0xca0 <task1_code+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c50:	7c 85       	ldd	r23, Y+12	; 0x0c
     c52:	8d 85       	ldd	r24, Y+13	; 0x0d
     c54:	9e 85       	ldd	r25, Y+14	; 0x0e
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e2       	ldi	r20, 0x20	; 32
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	0f c0       	rjmp	.+30     	; 0xc96 <task1_code+0xd6>
     c78:	89 e1       	ldi	r24, 0x19	; 25
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <task1_code+0xc4>
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	9e 83       	std	Y+6, r25	; 0x06
     c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	69 f7       	brne	.-38     	; 0xc78 <task1_code+0xb8>
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <task1_code+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca0:	6f 81       	ldd	r22, Y+7	; 0x07
     ca2:	78 85       	ldd	r23, Y+8	; 0x08
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	9e 83       	std	Y+6, r25	; 0x06
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	9e 81       	ldd	r25, Y+6	; 0x06
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <task1_code+0x100>
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10000);
		vTaskDelay(2000);		
     cc8:	80 ed       	ldi	r24, 0xD0	; 208
     cca:	97 e0       	ldi	r25, 0x07	; 7
     ccc:	0e 94 48 16 	call	0x2c90	; 0x2c90 <vTaskDelay>
     cd0:	83 cf       	rjmp	.-250    	; 0xbd8 <task1_code+0x18>

00000cd2 <task2_code>:
		
}

/*Task 2 Code*/
 void task2_code(void*pvParamter)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <task2_code+0x6>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		lcd_clrScreen();
     ce0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <lcd_clrScreen>
		lcd_dispString("I am Task 2");	
     ce4:	8c e6       	ldi	r24, 0x6C	; 108
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <lcd_dispString>
		//_delay_ms(10000);
		vTaskDelay(2000);
     cec:	80 ed       	ldi	r24, 0xD0	; 208
     cee:	97 e0       	ldi	r25, 0x07	; 7
     cf0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <vTaskDelay>
     cf4:	f5 cf       	rjmp	.-22     	; 0xce0 <task2_code+0xe>

00000cf6 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	27 97       	sbiw	r28, 0x07	; 7
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	9d 83       	std	Y+5, r25	; 0x05
     d0c:	8c 83       	std	Y+4, r24	; 0x04
     d0e:	6e 83       	std	Y+6, r22	; 0x06
     d10:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     d12:	8a e1       	ldi	r24, 0x1A	; 26
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 53 09 	call	0x12a6	; 0x12a6 <pvPortMalloc>
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	09 f4       	brne	.+2      	; 0xd28 <xCoRoutineCreate+0x32>
     d26:	6f c0       	rjmp	.+222    	; 0xe06 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     d28:	80 91 88 00 	lds	r24, 0x0088
     d2c:	90 91 89 00 	lds	r25, 0x0089
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	41 f4       	brne	.+16     	; 0xd44 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	90 93 89 00 	sts	0x0089, r25
     d3c:	80 93 88 00 	sts	0x0088, r24
			prvInitialiseCoRoutineLists();
     d40:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     d44:	8e 81       	ldd	r24, Y+6	; 0x06
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	10 f0       	brcs	.+4      	; 0xd4e <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	11 8e       	std	Z+25, r1	; 0x19
     d54:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	8e 81       	ldd	r24, Y+6	; 0x06
     d5c:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	02 96       	adiw	r24, 0x02	; 2
     d78:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	0c 96       	adiw	r24, 0x0c	; 12
     d82:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	91 87       	std	Z+9, r25	; 0x09
     d90:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	93 8b       	std	Z+19, r25	; 0x13
     d9c:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     d9e:	8e 81       	ldd	r24, Y+6	; 0x06
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	82 1b       	sub	r24, r18
     daa:	93 0b       	sbc	r25, r19
     dac:	e9 81       	ldd	r30, Y+1	; 0x01
     dae:	fa 81       	ldd	r31, Y+2	; 0x02
     db0:	95 87       	std	Z+13, r25	; 0x0d
     db2:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     db4:	e9 81       	ldd	r30, Y+1	; 0x01
     db6:	fa 81       	ldd	r31, Y+2	; 0x02
     db8:	96 89       	ldd	r25, Z+22	; 0x16
     dba:	80 91 8a 00 	lds	r24, 0x008A
     dbe:	89 17       	cp	r24, r25
     dc0:	28 f4       	brcc	.+10     	; 0xdcc <xCoRoutineCreate+0xd6>
     dc2:	e9 81       	ldd	r30, Y+1	; 0x01
     dc4:	fa 81       	ldd	r31, Y+2	; 0x02
     dc6:	86 89       	ldd	r24, Z+22	; 0x16
     dc8:	80 93 8a 00 	sts	0x008A, r24
     dcc:	e9 81       	ldd	r30, Y+1	; 0x01
     dce:	fa 81       	ldd	r31, Y+2	; 0x02
     dd0:	86 89       	ldd	r24, Z+22	; 0x16
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	ac 01       	movw	r20, r24
     dea:	4f 56       	subi	r20, 0x6F	; 111
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	9c 01       	movw	r18, r24
     df4:	2e 5f       	subi	r18, 0xFE	; 254
     df6:	3f 4f       	sbci	r19, 0xFF	; 255
     df8:	ca 01       	movw	r24, r20
     dfa:	b9 01       	movw	r22, r18
     dfc:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>

		xReturn = pdPASS;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8b 83       	std	Y+3, r24	; 0x03
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e0c:	27 96       	adiw	r28, 0x07	; 7
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <vCoRoutineAddToDelayedList+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <vCoRoutineAddToDelayedList+0x8>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <vCoRoutineAddToDelayedList+0xa>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	7e 83       	std	Y+6, r23	; 0x06
     e32:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     e34:	20 91 8b 00 	lds	r18, 0x008B
     e38:	30 91 8c 00 	lds	r19, 0x008C
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     e48:	80 91 88 00 	lds	r24, 0x0088
     e4c:	90 91 89 00 	lds	r25, 0x0089
     e50:	02 96       	adiw	r24, 0x02	; 2
     e52:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     e56:	e0 91 88 00 	lds	r30, 0x0088
     e5a:	f0 91 89 00 	lds	r31, 0x0089
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     e66:	20 91 8b 00 	lds	r18, 0x008B
     e6a:	30 91 8c 00 	lds	r19, 0x008C
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	82 17       	cp	r24, r18
     e74:	93 07       	cpc	r25, r19
     e76:	70 f4       	brcc	.+28     	; 0xe94 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     e78:	80 91 b7 00 	lds	r24, 0x00B7
     e7c:	90 91 b8 00 	lds	r25, 0x00B8
     e80:	20 91 88 00 	lds	r18, 0x0088
     e84:	30 91 89 00 	lds	r19, 0x0089
     e88:	2e 5f       	subi	r18, 0xFE	; 254
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	b9 01       	movw	r22, r18
     e8e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vListInsert>
     e92:	0d c0       	rjmp	.+26     	; 0xeae <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     e94:	80 91 b5 00 	lds	r24, 0x00B5
     e98:	90 91 b6 00 	lds	r25, 0x00B6
     e9c:	20 91 88 00 	lds	r18, 0x0088
     ea0:	30 91 89 00 	lds	r19, 0x0089
     ea4:	2e 5f       	subi	r18, 0xFE	; 254
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	b9 01       	movw	r22, r18
     eaa:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vListInsert>
	}

	if( pxEventList )
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	61 f0       	breq	.+24     	; 0xece <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     eb6:	80 91 88 00 	lds	r24, 0x0088
     eba:	90 91 89 00 	lds	r25, 0x0089
     ebe:	9c 01       	movw	r18, r24
     ec0:	24 5f       	subi	r18, 0xF4	; 244
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	b9 01       	movw	r22, r18
     eca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vListInsert>
	}
}
     ece:	26 96       	adiw	r28, 0x06	; 6
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <prvCheckPendingReadyList+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	3a c0       	rjmp	.+116    	; 0xf60 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     eec:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     eee:	e0 91 be 00 	lds	r30, 0x00BE
     ef2:	f0 91 bf 00 	lds	r31, 0x00BF
     ef6:	86 81       	ldd	r24, Z+6	; 0x06
     ef8:	97 81       	ldd	r25, Z+7	; 0x07
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	0c 96       	adiw	r24, 0x0c	; 12
     f04:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     f08:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	02 96       	adiw	r24, 0x02	; 2
     f10:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	96 89       	ldd	r25, Z+22	; 0x16
     f1a:	80 91 8a 00 	lds	r24, 0x008A
     f1e:	89 17       	cp	r24, r25
     f20:	28 f4       	brcc	.+10     	; 0xf2c <prvCheckPendingReadyList+0x4c>
     f22:	e9 81       	ldd	r30, Y+1	; 0x01
     f24:	fa 81       	ldd	r31, Y+2	; 0x02
     f26:	86 89       	ldd	r24, Z+22	; 0x16
     f28:	80 93 8a 00 	sts	0x008A, r24
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	86 89       	ldd	r24, Z+22	; 0x16
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	c9 01       	movw	r24, r18
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	ac 01       	movw	r20, r24
     f4a:	4f 56       	subi	r20, 0x6F	; 111
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	9c 01       	movw	r18, r24
     f54:	2e 5f       	subi	r18, 0xFE	; 254
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	ca 01       	movw	r24, r20
     f5a:	b9 01       	movw	r22, r18
     f5c:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     f60:	80 91 b9 00 	lds	r24, 0x00B9
     f64:	88 23       	and	r24, r24
     f66:	09 f0       	breq	.+2      	; 0xf6a <prvCheckPendingReadyList+0x8a>
     f68:	c1 cf       	rjmp	.-126    	; 0xeec <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <prvCheckDelayedList+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <prvCheckDelayedList+0x8>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     f80:	0e 94 56 17 	call	0x2eac	; 0x2eac <xTaskGetTickCount>
     f84:	20 91 8d 00 	lds	r18, 0x008D
     f88:	30 91 8e 00 	lds	r19, 0x008E
     f8c:	82 1b       	sub	r24, r18
     f8e:	93 0b       	sbc	r25, r19
     f90:	90 93 90 00 	sts	0x0090, r25
     f94:	80 93 8f 00 	sts	0x008F, r24
     f98:	85 c0       	rjmp	.+266    	; 0x10a4 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     f9a:	80 91 8b 00 	lds	r24, 0x008B
     f9e:	90 91 8c 00 	lds	r25, 0x008C
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	90 93 8c 00 	sts	0x008C, r25
     fa8:	80 93 8b 00 	sts	0x008B, r24
		xPassedTicks--;
     fac:	80 91 8f 00 	lds	r24, 0x008F
     fb0:	90 91 90 00 	lds	r25, 0x0090
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	90 93 90 00 	sts	0x0090, r25
     fba:	80 93 8f 00 	sts	0x008F, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     fbe:	80 91 8b 00 	lds	r24, 0x008B
     fc2:	90 91 8c 00 	lds	r25, 0x008C
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	09 f0       	breq	.+2      	; 0xfcc <prvCheckDelayedList+0x58>
     fca:	64 c0       	rjmp	.+200    	; 0x1094 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     fcc:	80 91 b5 00 	lds	r24, 0x00B5
     fd0:	90 91 b6 00 	lds	r25, 0x00B6
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     fd8:	80 91 b7 00 	lds	r24, 0x00B7
     fdc:	90 91 b8 00 	lds	r25, 0x00B8
     fe0:	90 93 b6 00 	sts	0x00B6, r25
     fe4:	80 93 b5 00 	sts	0x00B5, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	90 93 b8 00 	sts	0x00B8, r25
     ff0:	80 93 b7 00 	sts	0x00B7, r24
     ff4:	4f c0       	rjmp	.+158    	; 0x1094 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     ff6:	e0 91 b5 00 	lds	r30, 0x00B5
     ffa:	f0 91 b6 00 	lds	r31, 0x00B6
     ffe:	05 80       	ldd	r0, Z+5	; 0x05
    1000:	f6 81       	ldd	r31, Z+6	; 0x06
    1002:	e0 2d       	mov	r30, r0
    1004:	86 81       	ldd	r24, Z+6	; 0x06
    1006:	97 81       	ldd	r25, Z+7	; 0x07
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    100c:	eb 81       	ldd	r30, Y+3	; 0x03
    100e:	fc 81       	ldd	r31, Y+4	; 0x04
    1010:	22 81       	ldd	r18, Z+2	; 0x02
    1012:	33 81       	ldd	r19, Z+3	; 0x03
    1014:	80 91 8b 00 	lds	r24, 0x008B
    1018:	90 91 8c 00 	lds	r25, 0x008C
    101c:	82 17       	cp	r24, r18
    101e:	93 07       	cpc	r25, r19
    1020:	08 f4       	brcc	.+2      	; 0x1024 <prvCheckDelayedList+0xb0>
    1022:	40 c0       	rjmp	.+128    	; 0x10a4 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    1024:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	02 96       	adiw	r24, 0x02	; 2
    102c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    1030:	eb 81       	ldd	r30, Y+3	; 0x03
    1032:	fc 81       	ldd	r31, Y+4	; 0x04
    1034:	84 89       	ldd	r24, Z+20	; 0x14
    1036:	95 89       	ldd	r25, Z+21	; 0x15
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	29 f0       	breq	.+10     	; 0x1046 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	0c 96       	adiw	r24, 0x0c	; 12
    1042:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1046:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    1048:	eb 81       	ldd	r30, Y+3	; 0x03
    104a:	fc 81       	ldd	r31, Y+4	; 0x04
    104c:	96 89       	ldd	r25, Z+22	; 0x16
    104e:	80 91 8a 00 	lds	r24, 0x008A
    1052:	89 17       	cp	r24, r25
    1054:	28 f4       	brcc	.+10     	; 0x1060 <prvCheckDelayedList+0xec>
    1056:	eb 81       	ldd	r30, Y+3	; 0x03
    1058:	fc 81       	ldd	r31, Y+4	; 0x04
    105a:	86 89       	ldd	r24, Z+22	; 0x16
    105c:	80 93 8a 00 	sts	0x008A, r24
    1060:	eb 81       	ldd	r30, Y+3	; 0x03
    1062:	fc 81       	ldd	r31, Y+4	; 0x04
    1064:	86 89       	ldd	r24, Z+22	; 0x16
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	c9 01       	movw	r24, r18
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	ac 01       	movw	r20, r24
    107e:	4f 56       	subi	r20, 0x6F	; 111
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	9c 01       	movw	r18, r24
    1088:	2e 5f       	subi	r18, 0xFE	; 254
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	ca 01       	movw	r24, r20
    108e:	b9 01       	movw	r22, r18
    1090:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    1094:	e0 91 b5 00 	lds	r30, 0x00B5
    1098:	f0 91 b6 00 	lds	r31, 0x00B6
    109c:	80 81       	ld	r24, Z
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <prvCheckDelayedList+0x130>
    10a2:	a9 cf       	rjmp	.-174    	; 0xff6 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    10a4:	80 91 8f 00 	lds	r24, 0x008F
    10a8:	90 91 90 00 	lds	r25, 0x0090
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <prvCheckDelayedList+0x13e>
    10b0:	74 cf       	rjmp	.-280    	; 0xf9a <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    10b2:	80 91 8b 00 	lds	r24, 0x008B
    10b6:	90 91 8c 00 	lds	r25, 0x008C
    10ba:	90 93 8e 00 	sts	0x008E, r25
    10be:	80 93 8d 00 	sts	0x008D, r24
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <vCoRoutineSchedule+0x6>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    10da:	0e 94 70 07 	call	0xee0	; 0xee0 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    10de:	0e 94 ba 07 	call	0xf74	; 0xf74 <prvCheckDelayedList>
    10e2:	0a c0       	rjmp	.+20     	; 0x10f8 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    10e4:	80 91 8a 00 	lds	r24, 0x008A
    10e8:	88 23       	and	r24, r24
    10ea:	09 f4       	brne	.+2      	; 0x10ee <vCoRoutineSchedule+0x1e>
    10ec:	66 c0       	rjmp	.+204    	; 0x11ba <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    10ee:	80 91 8a 00 	lds	r24, 0x008A
    10f2:	81 50       	subi	r24, 0x01	; 1
    10f4:	80 93 8a 00 	sts	0x008A, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    10f8:	80 91 8a 00 	lds	r24, 0x008A
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	c9 01       	movw	r24, r18
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	82 0f       	add	r24, r18
    1110:	93 1f       	adc	r25, r19
    1112:	fc 01       	movw	r30, r24
    1114:	ef 56       	subi	r30, 0x6F	; 111
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	80 81       	ld	r24, Z
    111a:	88 23       	and	r24, r24
    111c:	19 f3       	breq	.-58     	; 0x10e4 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    111e:	80 91 8a 00 	lds	r24, 0x008A
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	c9 01       	movw	r24, r18
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	82 0f       	add	r24, r18
    1136:	93 1f       	adc	r25, r19
    1138:	8f 56       	subi	r24, 0x6F	; 111
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	01 80       	ldd	r0, Z+1	; 0x01
    1146:	f2 81       	ldd	r31, Z+2	; 0x02
    1148:	e0 2d       	mov	r30, r0
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	e9 81       	ldd	r30, Y+1	; 0x01
    1150:	fa 81       	ldd	r31, Y+2	; 0x02
    1152:	92 83       	std	Z+2, r25	; 0x02
    1154:	81 83       	std	Z+1, r24	; 0x01
    1156:	e9 81       	ldd	r30, Y+1	; 0x01
    1158:	fa 81       	ldd	r31, Y+2	; 0x02
    115a:	21 81       	ldd	r18, Z+1	; 0x01
    115c:	32 81       	ldd	r19, Z+2	; 0x02
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	03 96       	adiw	r24, 0x03	; 3
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	59 f4       	brne	.+22     	; 0x1180 <vCoRoutineSchedule+0xb0>
    116a:	e9 81       	ldd	r30, Y+1	; 0x01
    116c:	fa 81       	ldd	r31, Y+2	; 0x02
    116e:	01 80       	ldd	r0, Z+1	; 0x01
    1170:	f2 81       	ldd	r31, Z+2	; 0x02
    1172:	e0 2d       	mov	r30, r0
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	e9 81       	ldd	r30, Y+1	; 0x01
    117a:	fa 81       	ldd	r31, Y+2	; 0x02
    117c:	92 83       	std	Z+2, r25	; 0x02
    117e:	81 83       	std	Z+1, r24	; 0x01
    1180:	e9 81       	ldd	r30, Y+1	; 0x01
    1182:	fa 81       	ldd	r31, Y+2	; 0x02
    1184:	01 80       	ldd	r0, Z+1	; 0x01
    1186:	f2 81       	ldd	r31, Z+2	; 0x02
    1188:	e0 2d       	mov	r30, r0
    118a:	86 81       	ldd	r24, Z+6	; 0x06
    118c:	97 81       	ldd	r25, Z+7	; 0x07
    118e:	90 93 89 00 	sts	0x0089, r25
    1192:	80 93 88 00 	sts	0x0088, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1196:	e0 91 88 00 	lds	r30, 0x0088
    119a:	f0 91 89 00 	lds	r31, 0x0089
    119e:	40 81       	ld	r20, Z
    11a0:	51 81       	ldd	r21, Z+1	; 0x01
    11a2:	80 91 88 00 	lds	r24, 0x0088
    11a6:	90 91 89 00 	lds	r25, 0x0089
    11aa:	e0 91 88 00 	lds	r30, 0x0088
    11ae:	f0 91 89 00 	lds	r31, 0x0089
    11b2:	27 89       	ldd	r18, Z+23	; 0x17
    11b4:	62 2f       	mov	r22, r18
    11b6:	fa 01       	movw	r30, r20
    11b8:	09 95       	icall

	return;
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    11ce:	19 82       	std	Y+1, r1	; 0x01
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	c9 01       	movw	r24, r18
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	8f 56       	subi	r24, 0x6F	; 111
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	50 f3       	brcs	.-44     	; 0x11d2 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    11fe:	83 ea       	ldi	r24, 0xA3	; 163
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    1206:	8c ea       	ldi	r24, 0xAC	; 172
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    120e:	89 eb       	ldi	r24, 0xB9	; 185
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1216:	83 ea       	ldi	r24, 0xA3	; 163
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	90 93 b6 00 	sts	0x00B6, r25
    121e:	80 93 b5 00 	sts	0x00B5, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1222:	8c ea       	ldi	r24, 0xAC	; 172
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	90 93 b8 00 	sts	0x00B8, r25
    122a:	80 93 b7 00 	sts	0x00B7, r24
}
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <xCoRoutineRemoveFromEventList+0x6>
    123c:	00 d0       	rcall	.+0      	; 0x123e <xCoRoutineRemoveFromEventList+0x8>
    123e:	0f 92       	push	r0
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1248:	ec 81       	ldd	r30, Y+4	; 0x04
    124a:	fd 81       	ldd	r31, Y+5	; 0x05
    124c:	05 80       	ldd	r0, Z+5	; 0x05
    124e:	f6 81       	ldd	r31, Z+6	; 0x06
    1250:	e0 2d       	mov	r30, r0
    1252:	86 81       	ldd	r24, Z+6	; 0x06
    1254:	97 81       	ldd	r25, Z+7	; 0x07
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	0c 96       	adiw	r24, 0x0c	; 12
    1260:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	9c 01       	movw	r18, r24
    126a:	24 5f       	subi	r18, 0xF4	; 244
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	89 eb       	ldi	r24, 0xB9	; 185
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	b9 01       	movw	r22, r18
    1274:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    1278:	ea 81       	ldd	r30, Y+2	; 0x02
    127a:	fb 81       	ldd	r31, Y+3	; 0x03
    127c:	96 89       	ldd	r25, Z+22	; 0x16
    127e:	e0 91 88 00 	lds	r30, 0x0088
    1282:	f0 91 89 00 	lds	r31, 0x0089
    1286:	86 89       	ldd	r24, Z+22	; 0x16
    1288:	98 17       	cp	r25, r24
    128a:	18 f0       	brcs	.+6      	; 0x1292 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    1292:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <pvPortMalloc+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <pvPortMalloc+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    12b6:	1a 82       	std	Y+2, r1	; 0x02
    12b8:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    12ba:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    12be:	80 91 c2 00 	lds	r24, 0x00C2
    12c2:	90 91 c3 00 	lds	r25, 0x00C3
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	82 0f       	add	r24, r18
    12cc:	93 1f       	adc	r25, r19
    12ce:	22 e0       	ldi	r18, 0x02	; 2
    12d0:	88 35       	cpi	r24, 0x58	; 88
    12d2:	92 07       	cpc	r25, r18
    12d4:	18 f5       	brcc	.+70     	; 0x131c <pvPortMalloc+0x76>
    12d6:	20 91 c2 00 	lds	r18, 0x00C2
    12da:	30 91 c3 00 	lds	r19, 0x00C3
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	28 0f       	add	r18, r24
    12e4:	39 1f       	adc	r19, r25
    12e6:	80 91 c2 00 	lds	r24, 0x00C2
    12ea:	90 91 c3 00 	lds	r25, 0x00C3
    12ee:	82 17       	cp	r24, r18
    12f0:	93 07       	cpc	r25, r19
    12f2:	a0 f4       	brcc	.+40     	; 0x131c <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    12f4:	80 91 c2 00 	lds	r24, 0x00C2
    12f8:	90 91 c3 00 	lds	r25, 0x00C3
    12fc:	8c 53       	subi	r24, 0x3C	; 60
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    1304:	20 91 c2 00 	lds	r18, 0x00C2
    1308:	30 91 c3 00 	lds	r19, 0x00C3
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	90 93 c3 00 	sts	0x00C3, r25
    1318:	80 93 c2 00 	sts	0x00C2, r24
		}	
	}
	xTaskResumeAll();
    131c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <vPortFree+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1352:	10 92 c3 00 	sts	0x00C3, r1
    1356:	10 92 c2 00 	sts	0x00C2, r1
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    1368:	20 91 c2 00 	lds	r18, 0x00C2
    136c:	30 91 c3 00 	lds	r19, 0x00C3
    1370:	88 e5       	ldi	r24, 0x58	; 88
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	82 1b       	sub	r24, r18
    1376:	93 0b       	sbc	r25, r19
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <enableTrigger>:
/////////////////////////////////////////////////////////////////////
//	lcd enable triggering function to make lcd aware about command or
//   data changes.
////////////////////////////////////////////////////////////////////
void enableTrigger(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	6c 97       	sbiw	r28, 0x1c	; 28
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61

	CLR_BIT(PORTB,2);
    1392:	a8 e3       	ldi	r26, 0x38	; 56
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e8 e3       	ldi	r30, 0x38	; 56
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8b 7f       	andi	r24, 0xFB	; 251
    139e:	8c 93       	st	X, r24
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e8       	ldi	r26, 0x80	; 128
    13a6:	bf e3       	ldi	r27, 0x3F	; 63
    13a8:	89 8f       	std	Y+25, r24	; 0x19
    13aa:	9a 8f       	std	Y+26, r25	; 0x1a
    13ac:	ab 8f       	std	Y+27, r26	; 0x1b
    13ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	69 8d       	ldd	r22, Y+25	; 0x19
    13b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a e7       	ldi	r20, 0x7A	; 122
    13be:	53 e4       	ldi	r21, 0x43	; 67
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8d 8b       	std	Y+21, r24	; 0x15
    13ca:	9e 8b       	std	Y+22, r25	; 0x16
    13cc:	af 8b       	std	Y+23, r26	; 0x17
    13ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <enableTrigger+0x74>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <enableTrigger+0xf2>
	else if (__tmp > 65535)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <enableTrigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <enableTrigger+0xd4>
    1434:	89 e1       	ldi	r24, 0x19	; 25
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
    143c:	89 89       	ldd	r24, Y+17	; 0x11
    143e:	9a 89       	ldd	r25, Y+18	; 0x12
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <enableTrigger+0xc2>
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9c 8b       	std	Y+20, r25	; 0x14
    1450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <enableTrigger+0xb6>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <enableTrigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	8b 89       	ldd	r24, Y+19	; 0x13
    1472:	9c 89       	ldd	r25, Y+20	; 0x14
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	98 89       	ldd	r25, Y+16	; 0x10
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <enableTrigger+0xfe>
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_ms(1);

	SET_BIT(PORTB,2);
    1484:	a8 e3       	ldi	r26, 0x38	; 56
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e8 e3       	ldi	r30, 0x38	; 56
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	84 60       	ori	r24, 0x04	; 4
    1490:	8c 93       	st	X, r24
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 ec       	ldi	r26, 0xC0	; 192
    1498:	b0 e4       	ldi	r27, 0x40	; 64
    149a:	8b 87       	std	Y+11, r24	; 0x0b
    149c:	9c 87       	std	Y+12, r25	; 0x0c
    149e:	ad 87       	std	Y+13, r26	; 0x0d
    14a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a e7       	ldi	r20, 0x7A	; 122
    14b0:	53 e4       	ldi	r21, 0x43	; 67
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	8f 83       	std	Y+7, r24	; 0x07
    14bc:	98 87       	std	Y+8, r25	; 0x08
    14be:	a9 87       	std	Y+9, r26	; 0x09
    14c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d6:	88 23       	and	r24, r24
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <enableTrigger+0x166>
		__ticks = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	3f c0       	rjmp	.+126    	; 0x1562 <enableTrigger+0x1e4>
	else if (__tmp > 65535)
    14e4:	6f 81       	ldd	r22, Y+7	; 0x07
    14e6:	78 85       	ldd	r23, Y+8	; 0x08
    14e8:	89 85       	ldd	r24, Y+9	; 0x09
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4f e7       	ldi	r20, 0x7F	; 127
    14f2:	57 e4       	ldi	r21, 0x47	; 71
    14f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f8:	18 16       	cp	r1, r24
    14fa:	4c f5       	brge	.+82     	; 0x154e <enableTrigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1500:	8d 85       	ldd	r24, Y+13	; 0x0d
    1502:	9e 85       	ldd	r25, Y+14	; 0x0e
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	0f c0       	rjmp	.+30     	; 0x1544 <enableTrigger+0x1c6>
    1526:	89 e1       	ldi	r24, 0x19	; 25
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <enableTrigger+0x1b4>
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	69 f7       	brne	.-38     	; 0x1526 <enableTrigger+0x1a8>
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <enableTrigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154e:	6f 81       	ldd	r22, Y+7	; 0x07
    1550:	78 85       	ldd	r23, Y+8	; 0x08
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <enableTrigger+0x1f0>
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(6);


}
    1576:	6c 96       	adiw	r28, 0x1c	; 28
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <lcd_init>:
///////////////////////////////////////////////////////////////////////////////////////
// LCD initialization API : set portB from pinB.4 to pinB.7 as o/p for data and commands 
//							 and pinB.0 to pinB.2 o/p for control pins 
//////////////////////////////////////////////////////////////////////////////////////
void lcd_init(void)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62

	DDRB=0xff; // init port B as O/P port 
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	80 83       	st	Z, r24
	PORTB=0x04; // activate LCD enable 
    1598:	e8 e3       	ldi	r30, 0x38	; 56
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	80 83       	st	Z, r24

	lcd_sendCommand(0x33); // 4-bit mode 
    15a0:	83 e3       	ldi	r24, 0x33	; 51
    15a2:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_sendCommand>
	lcd_sendCommand (0x32);
    15a6:	82 e3       	ldi	r24, 0x32	; 50
    15a8:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_sendCommand>
	lcd_sendCommand (0x28);
    15ac:	88 e2       	ldi	r24, 0x28	; 40
    15ae:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_sendCommand>



	lcd_sendCommand(0x0c); // turn on lcd 
    15b2:	8c e0       	ldi	r24, 0x0C	; 12
    15b4:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_sendCommand>

		
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <lcd_sendCommand>:


void lcd_sendCommand(unsigned char cmd)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <lcd_sendCommand+0x6>
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	80 7f       	andi	r24, 0xF0	; 240
    15d0:	8a 83       	std	Y+2, r24	; 0x02
	LOW_NIBBLE(low_nibble,cmd);
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	82 95       	swap	r24
    15d6:	80 7f       	andi	r24, 0xF0	; 240
    15d8:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(PORTB,0); // to enable command mode 
    15da:	a8 e3       	ldi	r26, 0x38	; 56
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e3       	ldi	r30, 0x38	; 56
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	8c 93       	st	X, r24
	CLR_BIT(PORTB,1); // write signal to lcd 
    15e8:	a8 e3       	ldi	r26, 0x38	; 56
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e8 e3       	ldi	r30, 0x38	; 56
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8d 7f       	andi	r24, 0xFD	; 253
    15f4:	8c 93       	st	X, r24

	PORTB &=0x0f;
    15f6:	a8 e3       	ldi	r26, 0x38	; 56
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e8 e3       	ldi	r30, 0x38	; 56
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8f 70       	andi	r24, 0x0F	; 15
    1602:	8c 93       	st	X, r24
	PORTB |=high_nibble;// to send high nibble command  
    1604:	a8 e3       	ldi	r26, 0x38	; 56
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e3       	ldi	r30, 0x38	; 56
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	90 81       	ld	r25, Z
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	89 2b       	or	r24, r25
    1612:	8c 93       	st	X, r24
	enableTrigger(); // triggre lcd enable 
    1614:	0e 94 bf 09 	call	0x137e	; 0x137e <enableTrigger>

	PORTB &=0x0f;
    1618:	a8 e3       	ldi	r26, 0x38	; 56
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e8 e3       	ldi	r30, 0x38	; 56
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	8c 93       	st	X, r24
	PORTB |=low_nibble; // to send low nibble command 
    1626:	a8 e3       	ldi	r26, 0x38	; 56
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e8 e3       	ldi	r30, 0x38	; 56
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	90 81       	ld	r25, Z
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	89 2b       	or	r24, r25
    1634:	8c 93       	st	X, r24
	enableTrigger();
    1636:	0e 94 bf 09 	call	0x137e	; 0x137e <enableTrigger>

}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <lcd_displayChar>:

void lcd_displayChar (unsigned char data)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <lcd_displayChar+0x6>
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char high_nibble , low_nibble ;

	SET_BIT(PORTB,0); //  enable data mode 
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	8c 93       	st	X, r24
	CLR_BIT(PORTB,1); // activate lcd write 
    1662:	a8 e3       	ldi	r26, 0x38	; 56
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e8 e3       	ldi	r30, 0x38	; 56
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8d 7f       	andi	r24, 0xFD	; 253
    166e:	8c 93       	st	X, r24

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	80 7f       	andi	r24, 0xF0	; 240
    1674:	8a 83       	std	Y+2, r24	; 0x02
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	82 95       	swap	r24
    167a:	80 7f       	andi	r24, 0xF0	; 240
    167c:	89 83       	std	Y+1, r24	; 0x01
	
	PORTB &= 0x0f;
    167e:	a8 e3       	ldi	r26, 0x38	; 56
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e8 e3       	ldi	r30, 0x38	; 56
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 70       	andi	r24, 0x0F	; 15
    168a:	8c 93       	st	X, r24
	PORTB |=high_nibble;// to send high nibble data  
    168c:	a8 e3       	ldi	r26, 0x38	; 56
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e8 e3       	ldi	r30, 0x38	; 56
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	90 81       	ld	r25, Z
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	89 2b       	or	r24, r25
    169a:	8c 93       	st	X, r24
	enableTrigger(); // triggre lcd enable 
    169c:	0e 94 bf 09 	call	0x137e	; 0x137e <enableTrigger>
	
	PORTB &=0x0f;
    16a0:	a8 e3       	ldi	r26, 0x38	; 56
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e8 e3       	ldi	r30, 0x38	; 56
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 70       	andi	r24, 0x0F	; 15
    16ac:	8c 93       	st	X, r24
	PORTB |=low_nibble; // to send low nibble data 
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	90 81       	ld	r25, Z
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	89 2b       	or	r24, r25
    16bc:	8c 93       	st	X, r24
	enableTrigger();
    16be:	0e 94 bf 09 	call	0x137e	; 0x137e <enableTrigger>
	

}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <lcd_gotoxy>:


void lcd_gotoxy(unsigned char y , unsigned char x )
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <lcd_gotoxy+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <lcd_gotoxy+0x8>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char position = 0x80;
    16e0:	80 e8       	ldi	r24, 0x80	; 128
    16e2:	89 83       	std	Y+1, r24	; 0x01
	 
	switch(y)
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3d 83       	std	Y+5, r19	; 0x05
    16ec:	2c 83       	std	Y+4, r18	; 0x04
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	d1 f0       	breq	.+52     	; 0x172c <lcd_gotoxy+0x5e>
    16f8:	2c 81       	ldd	r18, Y+4	; 0x04
    16fa:	3d 81       	ldd	r19, Y+5	; 0x05
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	2c f4       	brge	.+10     	; 0x170c <lcd_gotoxy+0x3e>
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	61 f0       	breq	.+24     	; 0x1722 <lcd_gotoxy+0x54>
    170a:	20 c0       	rjmp	.+64     	; 0x174c <lcd_gotoxy+0x7e>
    170c:	2c 81       	ldd	r18, Y+4	; 0x04
    170e:	3d 81       	ldd	r19, Y+5	; 0x05
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	91 f0       	breq	.+36     	; 0x173a <lcd_gotoxy+0x6c>
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	9d 81       	ldd	r25, Y+5	; 0x05
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	91 f0       	breq	.+36     	; 0x1744 <lcd_gotoxy+0x76>
    1720:	15 c0       	rjmp	.+42     	; 0x174c <lcd_gotoxy+0x7e>
	{
		case 0:

			position=position+x;
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9b 81       	ldd	r25, Y+3	; 0x03
    1726:	89 0f       	add	r24, r25
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	10 c0       	rjmp	.+32     	; 0x174c <lcd_gotoxy+0x7e>
					
		break;

		case 1:

			position=0xc0;
    172c:	80 ec       	ldi	r24, 0xC0	; 192
    172e:	89 83       	std	Y+1, r24	; 0x01
			position=position+x;
    1730:	99 81       	ldd	r25, Y+1	; 0x01
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	89 0f       	add	r24, r25
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	09 c0       	rjmp	.+18     	; 0x174c <lcd_gotoxy+0x7e>

		break;

		case 2:

			position=position+x;
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	89 0f       	add	r24, r25
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	04 c0       	rjmp	.+8      	; 0x174c <lcd_gotoxy+0x7e>

		break;

		case 3:
			position=position+x;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9b 81       	ldd	r25, Y+3	; 0x03
    1748:	89 0f       	add	r24, r25
    174a:	89 83       	std	Y+1, r24	; 0x01
		break;
	
	
	}
	
	lcd_sendCommand(position); 	
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_sendCommand>


}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <lcd_clrScreen>:


void lcd_clrScreen(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62

	lcd_sendCommand(0x01);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_sendCommand>


}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <lcd_dispString>:


void lcd_dispString(char * ptr)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <lcd_dispString+0x6>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	0a c0       	rjmp	.+20     	; 0x179a <lcd_dispString+0x24>

	while(* ptr!= '\0')
	{
		lcd_displayChar(* ptr);
    1786:	e9 81       	ldd	r30, Y+1	; 0x01
    1788:	fa 81       	ldd	r31, Y+2	; 0x02
    178a:	80 81       	ld	r24, Z
    178c:	0e 94 23 0b 	call	0x1646	; 0x1646 <lcd_displayChar>
		ptr++;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	9a 83       	std	Y+2, r25	; 0x02
    1798:	89 83       	std	Y+1, r24	; 0x01


void lcd_dispString(char * ptr)
{

	while(* ptr!= '\0')
    179a:	e9 81       	ldd	r30, Y+1	; 0x01
    179c:	fa 81       	ldd	r31, Y+2	; 0x02
    179e:	80 81       	ld	r24, Z
    17a0:	88 23       	and	r24, r24
    17a2:	89 f7       	brne	.-30     	; 0x1786 <lcd_dispString+0x10>
	
	}



}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <lcd_disp_string_xy>:

void lcd_disp_string_xy(char * ptr , int y , int x)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <lcd_disp_string_xy+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <lcd_disp_string_xy+0x8>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <lcd_disp_string_xy+0xa>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	7c 83       	std	Y+4, r23	; 0x04
    17c2:	6b 83       	std	Y+3, r22	; 0x03
    17c4:	5e 83       	std	Y+6, r21	; 0x06
    17c6:	4d 83       	std	Y+5, r20	; 0x05

	lcd_gotoxy(y,x);
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	69 2f       	mov	r22, r25
    17ce:	0e 94 67 0b 	call	0x16ce	; 0x16ce <lcd_gotoxy>
	lcd_dispString(ptr);
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <lcd_dispString>

	


}
    17da:	26 96       	adiw	r28, 0x06	; 6
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <vListInitialise+0x6>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	03 96       	adiw	r24, 0x03	; 3
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	92 83       	std	Z+2, r25	; 0x02
    1806:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	94 83       	std	Z+4, r25	; 0x04
    1812:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	03 96       	adiw	r24, 0x03	; 3
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	96 83       	std	Z+6, r25	; 0x06
    1820:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	03 96       	adiw	r24, 0x03	; 3
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	90 87       	std	Z+8, r25	; 0x08
    182e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	10 82       	st	Z, r1
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <vListInitialiseItem+0x6>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	11 86       	std	Z+9, r1	; 0x09
    1854:	10 86       	std	Z+8, r1	; 0x08
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <vListInsertEnd+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <vListInsertEnd+0x8>
    1868:	00 d0       	rcall	.+0      	; 0x186a <vListInsertEnd+0xa>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	7e 83       	std	Y+6, r23	; 0x06
    1874:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1876:	eb 81       	ldd	r30, Y+3	; 0x03
    1878:	fc 81       	ldd	r31, Y+4	; 0x04
    187a:	81 81       	ldd	r24, Z+1	; 0x01
    187c:	92 81       	ldd	r25, Z+2	; 0x02
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	ed 81       	ldd	r30, Y+5	; 0x05
    188c:	fe 81       	ldd	r31, Y+6	; 0x06
    188e:	93 83       	std	Z+3, r25	; 0x03
    1890:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1892:	eb 81       	ldd	r30, Y+3	; 0x03
    1894:	fc 81       	ldd	r31, Y+4	; 0x04
    1896:	81 81       	ldd	r24, Z+1	; 0x01
    1898:	92 81       	ldd	r25, Z+2	; 0x02
    189a:	ed 81       	ldd	r30, Y+5	; 0x05
    189c:	fe 81       	ldd	r31, Y+6	; 0x06
    189e:	95 83       	std	Z+5, r25	; 0x05
    18a0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    18a2:	e9 81       	ldd	r30, Y+1	; 0x01
    18a4:	fa 81       	ldd	r31, Y+2	; 0x02
    18a6:	02 80       	ldd	r0, Z+2	; 0x02
    18a8:	f3 81       	ldd	r31, Z+3	; 0x03
    18aa:	e0 2d       	mov	r30, r0
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	95 83       	std	Z+5, r25	; 0x05
    18b2:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ba:	fa 81       	ldd	r31, Y+2	; 0x02
    18bc:	93 83       	std	Z+3, r25	; 0x03
    18be:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	eb 81       	ldd	r30, Y+3	; 0x03
    18c6:	fc 81       	ldd	r31, Y+4	; 0x04
    18c8:	92 83       	std	Z+2, r25	; 0x02
    18ca:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    18cc:	ed 81       	ldd	r30, Y+5	; 0x05
    18ce:	fe 81       	ldd	r31, Y+6	; 0x06
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	91 87       	std	Z+9, r25	; 0x09
    18d6:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    18d8:	eb 81       	ldd	r30, Y+3	; 0x03
    18da:	fc 81       	ldd	r31, Y+4	; 0x04
    18dc:	80 81       	ld	r24, Z
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	eb 81       	ldd	r30, Y+3	; 0x03
    18e2:	fc 81       	ldd	r31, Y+4	; 0x04
    18e4:	80 83       	st	Z, r24
}
    18e6:	26 96       	adiw	r28, 0x06	; 6
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	28 97       	sbiw	r28, 0x08	; 8
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	78 87       	std	Y+8, r23	; 0x08
    1912:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1914:	ef 81       	ldd	r30, Y+7	; 0x07
    1916:	f8 85       	ldd	r31, Y+8	; 0x08
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	2f ef       	ldi	r18, 0xFF	; 255
    1926:	8f 3f       	cpi	r24, 0xFF	; 255
    1928:	92 07       	cpc	r25, r18
    192a:	39 f4       	brne	.+14     	; 0x193a <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    192c:	ed 81       	ldd	r30, Y+5	; 0x05
    192e:	fe 81       	ldd	r31, Y+6	; 0x06
    1930:	87 81       	ldd	r24, Z+7	; 0x07
    1932:	90 85       	ldd	r25, Z+8	; 0x08
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	18 c0       	rjmp	.+48     	; 0x196a <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	03 96       	adiw	r24, 0x03	; 3
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <vListInsert+0x5a>
    1946:	eb 81       	ldd	r30, Y+3	; 0x03
    1948:	fc 81       	ldd	r31, Y+4	; 0x04
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
    1952:	eb 81       	ldd	r30, Y+3	; 0x03
    1954:	fc 81       	ldd	r31, Y+4	; 0x04
    1956:	02 80       	ldd	r0, Z+2	; 0x02
    1958:	f3 81       	ldd	r31, Z+3	; 0x03
    195a:	e0 2d       	mov	r30, r0
    195c:	20 81       	ld	r18, Z
    195e:	31 81       	ldd	r19, Z+1	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	82 17       	cp	r24, r18
    1966:	93 07       	cpc	r25, r19
    1968:	70 f7       	brcc	.-36     	; 0x1946 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    196a:	eb 81       	ldd	r30, Y+3	; 0x03
    196c:	fc 81       	ldd	r31, Y+4	; 0x04
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	ef 81       	ldd	r30, Y+7	; 0x07
    1974:	f8 85       	ldd	r31, Y+8	; 0x08
    1976:	93 83       	std	Z+3, r25	; 0x03
    1978:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    197a:	ef 81       	ldd	r30, Y+7	; 0x07
    197c:	f8 85       	ldd	r31, Y+8	; 0x08
    197e:	02 80       	ldd	r0, Z+2	; 0x02
    1980:	f3 81       	ldd	r31, Z+3	; 0x03
    1982:	e0 2d       	mov	r30, r0
    1984:	8f 81       	ldd	r24, Y+7	; 0x07
    1986:	98 85       	ldd	r25, Y+8	; 0x08
    1988:	95 83       	std	Z+5, r25	; 0x05
    198a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    198c:	ef 81       	ldd	r30, Y+7	; 0x07
    198e:	f8 85       	ldd	r31, Y+8	; 0x08
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	95 83       	std	Z+5, r25	; 0x05
    1996:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1998:	8f 81       	ldd	r24, Y+7	; 0x07
    199a:	98 85       	ldd	r25, Y+8	; 0x08
    199c:	eb 81       	ldd	r30, Y+3	; 0x03
    199e:	fc 81       	ldd	r31, Y+4	; 0x04
    19a0:	93 83       	std	Z+3, r25	; 0x03
    19a2:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    19a4:	ef 81       	ldd	r30, Y+7	; 0x07
    19a6:	f8 85       	ldd	r31, Y+8	; 0x08
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	91 87       	std	Z+9, r25	; 0x09
    19ae:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    19b0:	ed 81       	ldd	r30, Y+5	; 0x05
    19b2:	fe 81       	ldd	r31, Y+6	; 0x06
    19b4:	80 81       	ld	r24, Z
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	ed 81       	ldd	r30, Y+5	; 0x05
    19ba:	fe 81       	ldd	r31, Y+6	; 0x06
    19bc:	80 83       	st	Z, r24
}
    19be:	28 96       	adiw	r28, 0x08	; 8
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <vListRemove+0x6>
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <vListRemove+0x8>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	9c 83       	std	Y+4, r25	; 0x04
    19de:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    19e0:	eb 81       	ldd	r30, Y+3	; 0x03
    19e2:	fc 81       	ldd	r31, Y+4	; 0x04
    19e4:	a2 81       	ldd	r26, Z+2	; 0x02
    19e6:	b3 81       	ldd	r27, Z+3	; 0x03
    19e8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ea:	fc 81       	ldd	r31, Y+4	; 0x04
    19ec:	84 81       	ldd	r24, Z+4	; 0x04
    19ee:	95 81       	ldd	r25, Z+5	; 0x05
    19f0:	15 96       	adiw	r26, 0x05	; 5
    19f2:	9c 93       	st	X, r25
    19f4:	8e 93       	st	-X, r24
    19f6:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    19f8:	eb 81       	ldd	r30, Y+3	; 0x03
    19fa:	fc 81       	ldd	r31, Y+4	; 0x04
    19fc:	a4 81       	ldd	r26, Z+4	; 0x04
    19fe:	b5 81       	ldd	r27, Z+5	; 0x05
    1a00:	eb 81       	ldd	r30, Y+3	; 0x03
    1a02:	fc 81       	ldd	r31, Y+4	; 0x04
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	13 96       	adiw	r26, 0x03	; 3
    1a0a:	9c 93       	st	X, r25
    1a0c:	8e 93       	st	-X, r24
    1a0e:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1a10:	eb 81       	ldd	r30, Y+3	; 0x03
    1a12:	fc 81       	ldd	r31, Y+4	; 0x04
    1a14:	80 85       	ldd	r24, Z+8	; 0x08
    1a16:	91 85       	ldd	r25, Z+9	; 0x09
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a20:	21 81       	ldd	r18, Z+1	; 0x01
    1a22:	32 81       	ldd	r19, Z+2	; 0x02
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	28 17       	cp	r18, r24
    1a2a:	39 07       	cpc	r19, r25
    1a2c:	41 f4       	brne	.+16     	; 0x1a3e <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a30:	fc 81       	ldd	r31, Y+4	; 0x04
    1a32:	84 81       	ldd	r24, Z+4	; 0x04
    1a34:	95 81       	ldd	r25, Z+5	; 0x05
    1a36:	e9 81       	ldd	r30, Y+1	; 0x01
    1a38:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3a:	92 83       	std	Z+2, r25	; 0x02
    1a3c:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1a3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a40:	fc 81       	ldd	r31, Y+4	; 0x04
    1a42:	11 86       	std	Z+9, r1	; 0x09
    1a44:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 50       	subi	r24, 0x01	; 1
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	80 83       	st	Z, r24
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	28 97       	sbiw	r28, 0x08	; 8
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
    1a7a:	7e 83       	std	Y+6, r23	; 0x06
    1a7c:	6d 83       	std	Y+5, r22	; 0x05
    1a7e:	58 87       	std	Y+8, r21	; 0x08
    1a80:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1a82:	eb 81       	ldd	r30, Y+3	; 0x03
    1a84:	fc 81       	ldd	r31, Y+4	; 0x04
    1a86:	81 e1       	ldi	r24, 0x11	; 17
    1a88:	80 83       	st	Z, r24
	pxTopOfStack--;
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1a94:	eb 81       	ldd	r30, Y+3	; 0x03
    1a96:	fc 81       	ldd	r31, Y+4	; 0x04
    1a98:	82 e2       	ldi	r24, 0x22	; 34
    1a9a:	80 83       	st	Z, r24
	pxTopOfStack--;
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9c 83       	std	Y+4, r25	; 0x04
    1aa4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aaa:	83 e3       	ldi	r24, 0x33	; 51
    1aac:	80 83       	st	Z, r24
	pxTopOfStack--;
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac6:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	89 2f       	mov	r24, r25
    1ad8:	99 27       	eor	r25, r25
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae4:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    1af0:	eb 81       	ldd	r30, Y+3	; 0x03
    1af2:	fc 81       	ldd	r31, Y+4	; 0x04
    1af4:	10 82       	st	Z, r1
	pxTopOfStack--;
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1b00:	eb 81       	ldd	r30, Y+3	; 0x03
    1b02:	fc 81       	ldd	r31, Y+4	; 0x04
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    1b12:	eb 81       	ldd	r30, Y+3	; 0x03
    1b14:	fc 81       	ldd	r31, Y+4	; 0x04
    1b16:	10 82       	st	Z, r1
	pxTopOfStack--;
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1b22:	eb 81       	ldd	r30, Y+3	; 0x03
    1b24:	fc 81       	ldd	r31, Y+4	; 0x04
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1b34:	eb 81       	ldd	r30, Y+3	; 0x03
    1b36:	fc 81       	ldd	r31, Y+4	; 0x04
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1b46:	eb 81       	ldd	r30, Y+3	; 0x03
    1b48:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4a:	84 e0       	ldi	r24, 0x04	; 4
    1b4c:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    1b58:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5c:	85 e0       	ldi	r24, 0x05	; 5
    1b5e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    1b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b6e:	86 e0       	ldi	r24, 0x06	; 6
    1b70:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9c 83       	std	Y+4, r25	; 0x04
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    1b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b80:	87 e0       	ldi	r24, 0x07	; 7
    1b82:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1b8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b90:	fc 81       	ldd	r31, Y+4	; 0x04
    1b92:	88 e0       	ldi	r24, 0x08	; 8
    1b94:	80 83       	st	Z, r24
	pxTopOfStack--;
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    1ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba4:	89 e0       	ldi	r24, 0x09	; 9
    1ba6:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    1bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb6:	80 e1       	ldi	r24, 0x10	; 16
    1bb8:	80 83       	st	Z, r24
	pxTopOfStack--;
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    1bc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc8:	81 e1       	ldi	r24, 0x11	; 17
    1bca:	80 83       	st	Z, r24
	pxTopOfStack--;
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    1bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bda:	82 e1       	ldi	r24, 0x12	; 18
    1bdc:	80 83       	st	Z, r24
	pxTopOfStack--;
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    1be8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bea:	fc 81       	ldd	r31, Y+4	; 0x04
    1bec:	83 e1       	ldi	r24, 0x13	; 19
    1bee:	80 83       	st	Z, r24
	pxTopOfStack--;
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    1bfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfe:	84 e1       	ldi	r24, 0x14	; 20
    1c00:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    1c0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c10:	85 e1       	ldi	r24, 0x15	; 21
    1c12:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    1c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c20:	fc 81       	ldd	r31, Y+4	; 0x04
    1c22:	86 e1       	ldi	r24, 0x16	; 22
    1c24:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9c 83       	std	Y+4, r25	; 0x04
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    1c30:	eb 81       	ldd	r30, Y+3	; 0x03
    1c32:	fc 81       	ldd	r31, Y+4	; 0x04
    1c34:	87 e1       	ldi	r24, 0x17	; 23
    1c36:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    1c42:	eb 81       	ldd	r30, Y+3	; 0x03
    1c44:	fc 81       	ldd	r31, Y+4	; 0x04
    1c46:	88 e1       	ldi	r24, 0x18	; 24
    1c48:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    1c54:	eb 81       	ldd	r30, Y+3	; 0x03
    1c56:	fc 81       	ldd	r31, Y+4	; 0x04
    1c58:	89 e1       	ldi	r24, 0x19	; 25
    1c5a:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1c66:	eb 81       	ldd	r30, Y+3	; 0x03
    1c68:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6a:	80 e2       	ldi	r24, 0x20	; 32
    1c6c:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    1c78:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7c:	81 e2       	ldi	r24, 0x21	; 33
    1c7e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	82 e2       	ldi	r24, 0x22	; 34
    1c90:	80 83       	st	Z, r24
	pxTopOfStack--;
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    1c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca0:	83 e2       	ldi	r24, 0x23	; 35
    1ca2:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    1cae:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb0:	98 85       	ldd	r25, Y+8	; 0x08
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cba:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbc:	80 83       	st	Z, r24
	pxTopOfStack--;
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	89 2f       	mov	r24, r25
    1cce:	99 27       	eor	r25, r25
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cda:	80 83       	st	Z, r24
	pxTopOfStack--;
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    1ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cea:	86 e2       	ldi	r24, 0x26	; 38
    1cec:	80 83       	st	Z, r24
	pxTopOfStack--;
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	87 e2       	ldi	r24, 0x27	; 39
    1cfe:	80 83       	st	Z, r24
	pxTopOfStack--;
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    1d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0e:	88 e2       	ldi	r24, 0x28	; 40
    1d10:	80 83       	st	Z, r24
	pxTopOfStack--;
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	89 e2       	ldi	r24, 0x29	; 41
    1d22:	80 83       	st	Z, r24
	pxTopOfStack--;
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    1d2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d30:	fc 81       	ldd	r31, Y+4	; 0x04
    1d32:	80 e3       	ldi	r24, 0x30	; 48
    1d34:	80 83       	st	Z, r24
	pxTopOfStack--;
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    1d40:	eb 81       	ldd	r30, Y+3	; 0x03
    1d42:	fc 81       	ldd	r31, Y+4	; 0x04
    1d44:	81 e3       	ldi	r24, 0x31	; 49
    1d46:	80 83       	st	Z, r24
	pxTopOfStack--;
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1d56:	28 96       	adiw	r28, 0x08	; 8
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1d70:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1d74:	a0 91 1c 03 	lds	r26, 0x031C
    1d78:	b0 91 1d 03 	lds	r27, 0x031D
    1d7c:	cd 91       	ld	r28, X+
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	dd 91       	ld	r29, X+
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	ff 91       	pop	r31
    1d86:	ef 91       	pop	r30
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	bf 91       	pop	r27
    1d8e:	af 91       	pop	r26
    1d90:	9f 91       	pop	r25
    1d92:	8f 91       	pop	r24
    1d94:	7f 91       	pop	r23
    1d96:	6f 91       	pop	r22
    1d98:	5f 91       	pop	r21
    1d9a:	4f 91       	pop	r20
    1d9c:	3f 91       	pop	r19
    1d9e:	2f 91       	pop	r18
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	bf 90       	pop	r11
    1dae:	af 90       	pop	r10
    1db0:	9f 90       	pop	r9
    1db2:	8f 90       	pop	r8
    1db4:	7f 90       	pop	r7
    1db6:	6f 90       	pop	r6
    1db8:	5f 90       	pop	r5
    1dba:	4f 90       	pop	r4
    1dbc:	3f 90       	pop	r3
    1dbe:	2f 90       	pop	r2
    1dc0:	1f 90       	pop	r1
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    1dc8:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1de0:	0f 92       	push	r0
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	0f 92       	push	r0
    1de8:	1f 92       	push	r1
    1dea:	11 24       	eor	r1, r1
    1dec:	2f 92       	push	r2
    1dee:	3f 92       	push	r3
    1df0:	4f 92       	push	r4
    1df2:	5f 92       	push	r5
    1df4:	6f 92       	push	r6
    1df6:	7f 92       	push	r7
    1df8:	8f 92       	push	r8
    1dfa:	9f 92       	push	r9
    1dfc:	af 92       	push	r10
    1dfe:	bf 92       	push	r11
    1e00:	cf 92       	push	r12
    1e02:	df 92       	push	r13
    1e04:	ef 92       	push	r14
    1e06:	ff 92       	push	r15
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
    1e0c:	2f 93       	push	r18
    1e0e:	3f 93       	push	r19
    1e10:	4f 93       	push	r20
    1e12:	5f 93       	push	r21
    1e14:	6f 93       	push	r22
    1e16:	7f 93       	push	r23
    1e18:	8f 93       	push	r24
    1e1a:	9f 93       	push	r25
    1e1c:	af 93       	push	r26
    1e1e:	bf 93       	push	r27
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	ef 93       	push	r30
    1e26:	ff 93       	push	r31
    1e28:	a0 91 1c 03 	lds	r26, 0x031C
    1e2c:	b0 91 1d 03 	lds	r27, 0x031D
    1e30:	0d b6       	in	r0, 0x3d	; 61
    1e32:	0d 92       	st	X+, r0
    1e34:	0e b6       	in	r0, 0x3e	; 62
    1e36:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1e38:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1e3c:	a0 91 1c 03 	lds	r26, 0x031C
    1e40:	b0 91 1d 03 	lds	r27, 0x031D
    1e44:	cd 91       	ld	r28, X+
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	dd 91       	ld	r29, X+
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	ff 91       	pop	r31
    1e4e:	ef 91       	pop	r30
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	bf 91       	pop	r27
    1e56:	af 91       	pop	r26
    1e58:	9f 91       	pop	r25
    1e5a:	8f 91       	pop	r24
    1e5c:	7f 91       	pop	r23
    1e5e:	6f 91       	pop	r22
    1e60:	5f 91       	pop	r21
    1e62:	4f 91       	pop	r20
    1e64:	3f 91       	pop	r19
    1e66:	2f 91       	pop	r18
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	bf 90       	pop	r11
    1e76:	af 90       	pop	r10
    1e78:	9f 90       	pop	r9
    1e7a:	8f 90       	pop	r8
    1e7c:	7f 90       	pop	r7
    1e7e:	6f 90       	pop	r6
    1e80:	5f 90       	pop	r5
    1e82:	4f 90       	pop	r4
    1e84:	3f 90       	pop	r3
    1e86:	2f 90       	pop	r2
    1e88:	1f 90       	pop	r1
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1e90:	08 95       	ret

00001e92 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1e92:	0f 92       	push	r0
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	0f 92       	push	r0
    1e9a:	1f 92       	push	r1
    1e9c:	11 24       	eor	r1, r1
    1e9e:	2f 92       	push	r2
    1ea0:	3f 92       	push	r3
    1ea2:	4f 92       	push	r4
    1ea4:	5f 92       	push	r5
    1ea6:	6f 92       	push	r6
    1ea8:	7f 92       	push	r7
    1eaa:	8f 92       	push	r8
    1eac:	9f 92       	push	r9
    1eae:	af 92       	push	r10
    1eb0:	bf 92       	push	r11
    1eb2:	cf 92       	push	r12
    1eb4:	df 92       	push	r13
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	a0 91 1c 03 	lds	r26, 0x031C
    1ede:	b0 91 1d 03 	lds	r27, 0x031D
    1ee2:	0d b6       	in	r0, 0x3d	; 61
    1ee4:	0d 92       	st	X+, r0
    1ee6:	0e b6       	in	r0, 0x3e	; 62
    1ee8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1eea:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <vTaskIncrementTick>
	vTaskSwitchContext();
    1eee:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1ef2:	a0 91 1c 03 	lds	r26, 0x031C
    1ef6:	b0 91 1d 03 	lds	r27, 0x031D
    1efa:	cd 91       	ld	r28, X+
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	dd 91       	ld	r29, X+
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	ff 91       	pop	r31
    1f04:	ef 91       	pop	r30
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	bf 91       	pop	r27
    1f0c:	af 91       	pop	r26
    1f0e:	9f 91       	pop	r25
    1f10:	8f 91       	pop	r24
    1f12:	7f 91       	pop	r23
    1f14:	6f 91       	pop	r22
    1f16:	5f 91       	pop	r21
    1f18:	4f 91       	pop	r20
    1f1a:	3f 91       	pop	r19
    1f1c:	2f 91       	pop	r18
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	bf 90       	pop	r11
    1f2c:	af 90       	pop	r10
    1f2e:	9f 90       	pop	r9
    1f30:	8f 90       	pop	r8
    1f32:	7f 90       	pop	r7
    1f34:	6f 90       	pop	r6
    1f36:	5f 90       	pop	r5
    1f38:	4f 90       	pop	r4
    1f3a:	3f 90       	pop	r3
    1f3c:	2f 90       	pop	r2
    1f3e:	1f 90       	pop	r1
    1f40:	0f 90       	pop	r0
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1f46:	08 95       	ret

00001f48 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <prvSetupTimerInterrupt+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <prvSetupTimerInterrupt+0x8>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <prvSetupTimerInterrupt+0xa>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1f56:	80 e4       	ldi	r24, 0x40	; 64
    1f58:	9f e1       	ldi	r25, 0x1F	; 31
    1f5a:	a0 e0       	ldi	r26, 0x00	; 0
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	8b 83       	std	Y+3, r24	; 0x03
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	ad 83       	std	Y+5, r26	; 0x05
    1f64:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	ad 81       	ldd	r26, Y+5	; 0x05
    1f6c:	be 81       	ldd	r27, Y+6	; 0x06
    1f6e:	68 94       	set
    1f70:	15 f8       	bld	r1, 5
    1f72:	b6 95       	lsr	r27
    1f74:	a7 95       	ror	r26
    1f76:	97 95       	ror	r25
    1f78:	87 95       	ror	r24
    1f7a:	16 94       	lsr	r1
    1f7c:	d1 f7       	brne	.-12     	; 0x1f72 <prvSetupTimerInterrupt+0x2a>
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    1f80:	9c 83       	std	Y+4, r25	; 0x04
    1f82:	ad 83       	std	Y+5, r26	; 0x05
    1f84:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	ad 81       	ldd	r26, Y+5	; 0x05
    1f8c:	be 81       	ldd	r27, Y+6	; 0x06
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	a1 09       	sbc	r26, r1
    1f92:	b1 09       	sbc	r27, r1
    1f94:	8b 83       	std	Y+3, r24	; 0x03
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	ad 83       	std	Y+5, r26	; 0x05
    1f9a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	ad 81       	ldd	r26, Y+5	; 0x05
    1fa6:	be 81       	ldd	r27, Y+6	; 0x06
    1fa8:	89 2f       	mov	r24, r25
    1faa:	9a 2f       	mov	r25, r26
    1fac:	ab 2f       	mov	r26, r27
    1fae:	bb 27       	eor	r27, r27
    1fb0:	8b 83       	std	Y+3, r24	; 0x03
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	ad 83       	std	Y+5, r26	; 0x05
    1fb6:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    1fbc:	eb e4       	ldi	r30, 0x4B	; 75
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1fc4:	ea e4       	ldi	r30, 0x4A	; 74
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1fcc:	8b e0       	ldi	r24, 0x0B	; 11
    1fce:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1fd0:	ee e4       	ldi	r30, 0x4E	; 78
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1fd8:	e9 e5       	ldi	r30, 0x59	; 89
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	80 61       	ori	r24, 0x10	; 16
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1fe6:	e9 e5       	ldi	r30, 0x59	; 89
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	80 83       	st	Z, r24
}
    1fee:	26 96       	adiw	r28, 0x06	; 6
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <__vector_6>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    2000:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2004:	18 95       	reti

00002006 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	28 97       	sbiw	r28, 0x08	; 8
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	8f 83       	std	Y+7, r24	; 0x07
    201c:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    201e:	1a 82       	std	Y+2, r1	; 0x02
    2020:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2022:	8f 81       	ldd	r24, Y+7	; 0x07
    2024:	88 23       	and	r24, r24
    2026:	09 f4       	brne	.+2      	; 0x202a <xQueueCreate+0x24>
    2028:	8c c0       	rjmp	.+280    	; 0x2142 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    202a:	8f e1       	ldi	r24, 0x1F	; 31
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <pvPortMalloc>
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	09 f4       	brne	.+2      	; 0x2040 <xQueueCreate+0x3a>
    203e:	81 c0       	rjmp	.+258    	; 0x2142 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2040:	8f 81       	ldd	r24, Y+7	; 0x07
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	88 85       	ldd	r24, Y+8	; 0x08
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	ac 01       	movw	r20, r24
    204e:	24 9f       	mul	r18, r20
    2050:	c0 01       	movw	r24, r0
    2052:	25 9f       	mul	r18, r21
    2054:	90 0d       	add	r25, r0
    2056:	34 9f       	mul	r19, r20
    2058:	90 0d       	add	r25, r0
    205a:	11 24       	eor	r1, r1
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	0e 94 53 09 	call	0x12a6	; 0x12a6 <pvPortMalloc>
    206a:	ed 81       	ldd	r30, Y+5	; 0x05
    206c:	fe 81       	ldd	r31, Y+6	; 0x06
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    2072:	ed 81       	ldd	r30, Y+5	; 0x05
    2074:	fe 81       	ldd	r31, Y+6	; 0x06
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	09 f4       	brne	.+2      	; 0x2080 <xQueueCreate+0x7a>
    207e:	5d c0       	rjmp	.+186    	; 0x213a <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    2080:	ed 81       	ldd	r30, Y+5	; 0x05
    2082:	fe 81       	ldd	r31, Y+6	; 0x06
    2084:	40 81       	ld	r20, Z
    2086:	51 81       	ldd	r21, Z+1	; 0x01
    2088:	8f 81       	ldd	r24, Y+7	; 0x07
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	88 85       	ldd	r24, Y+8	; 0x08
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	bc 01       	movw	r22, r24
    2096:	26 9f       	mul	r18, r22
    2098:	c0 01       	movw	r24, r0
    209a:	27 9f       	mul	r18, r23
    209c:	90 0d       	add	r25, r0
    209e:	36 9f       	mul	r19, r22
    20a0:	90 0d       	add	r25, r0
    20a2:	11 24       	eor	r1, r1
    20a4:	84 0f       	add	r24, r20
    20a6:	95 1f       	adc	r25, r21
    20a8:	ed 81       	ldd	r30, Y+5	; 0x05
    20aa:	fe 81       	ldd	r31, Y+6	; 0x06
    20ac:	93 83       	std	Z+3, r25	; 0x03
    20ae:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    20b0:	ed 81       	ldd	r30, Y+5	; 0x05
    20b2:	fe 81       	ldd	r31, Y+6	; 0x06
    20b4:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    20b6:	ed 81       	ldd	r30, Y+5	; 0x05
    20b8:	fe 81       	ldd	r31, Y+6	; 0x06
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	ed 81       	ldd	r30, Y+5	; 0x05
    20c0:	fe 81       	ldd	r31, Y+6	; 0x06
    20c2:	95 83       	std	Z+5, r25	; 0x05
    20c4:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    20c6:	ed 81       	ldd	r30, Y+5	; 0x05
    20c8:	fe 81       	ldd	r31, Y+6	; 0x06
    20ca:	40 81       	ld	r20, Z
    20cc:	51 81       	ldd	r21, Z+1	; 0x01
    20ce:	8f 81       	ldd	r24, Y+7	; 0x07
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c 01       	movw	r18, r24
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	30 40       	sbci	r19, 0x00	; 0
    20da:	88 85       	ldd	r24, Y+8	; 0x08
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	bc 01       	movw	r22, r24
    20e2:	26 9f       	mul	r18, r22
    20e4:	c0 01       	movw	r24, r0
    20e6:	27 9f       	mul	r18, r23
    20e8:	90 0d       	add	r25, r0
    20ea:	36 9f       	mul	r19, r22
    20ec:	90 0d       	add	r25, r0
    20ee:	11 24       	eor	r1, r1
    20f0:	84 0f       	add	r24, r20
    20f2:	95 1f       	adc	r25, r21
    20f4:	ed 81       	ldd	r30, Y+5	; 0x05
    20f6:	fe 81       	ldd	r31, Y+6	; 0x06
    20f8:	97 83       	std	Z+7, r25	; 0x07
    20fa:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    20fc:	ed 81       	ldd	r30, Y+5	; 0x05
    20fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2100:	8f 81       	ldd	r24, Y+7	; 0x07
    2102:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2104:	ed 81       	ldd	r30, Y+5	; 0x05
    2106:	fe 81       	ldd	r31, Y+6	; 0x06
    2108:	88 85       	ldd	r24, Y+8	; 0x08
    210a:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    210c:	ed 81       	ldd	r30, Y+5	; 0x05
    210e:	fe 81       	ldd	r31, Y+6	; 0x06
    2110:	8f ef       	ldi	r24, 0xFF	; 255
    2112:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    2114:	ed 81       	ldd	r30, Y+5	; 0x05
    2116:	fe 81       	ldd	r31, Y+6	; 0x06
    2118:	8f ef       	ldi	r24, 0xFF	; 255
    211a:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	08 96       	adiw	r24, 0x08	; 8
    2122:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	41 96       	adiw	r24, 0x11	; 17
    212c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	0e 94 99 09 	call	0x1332	; 0x1332 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2146:	28 96       	adiw	r28, 0x08	; 8
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	2c 97       	sbiw	r28, 0x0c	; 12
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	78 87       	std	Y+8, r23	; 0x08
    2172:	6f 83       	std	Y+7, r22	; 0x07
    2174:	5a 87       	std	Y+10, r21	; 0x0a
    2176:	49 87       	std	Y+9, r20	; 0x09
    2178:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    217a:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2182:	ed 81       	ldd	r30, Y+5	; 0x05
    2184:	fe 81       	ldd	r31, Y+6	; 0x06
    2186:	92 8d       	ldd	r25, Z+26	; 0x1a
    2188:	ed 81       	ldd	r30, Y+5	; 0x05
    218a:	fe 81       	ldd	r31, Y+6	; 0x06
    218c:	83 8d       	ldd	r24, Z+27	; 0x1b
    218e:	98 17       	cp	r25, r24
    2190:	d8 f4       	brcc	.+54     	; 0x21c8 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	2f 81       	ldd	r18, Y+7	; 0x07
    2198:	38 85       	ldd	r19, Y+8	; 0x08
    219a:	b9 01       	movw	r22, r18
    219c:	4b 85       	ldd	r20, Y+11	; 0x0b
    219e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21a2:	ed 81       	ldd	r30, Y+5	; 0x05
    21a4:	fe 81       	ldd	r31, Y+6	; 0x06
    21a6:	81 89       	ldd	r24, Z+17	; 0x11
    21a8:	88 23       	and	r24, r24
    21aa:	49 f0       	breq	.+18     	; 0x21be <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	41 96       	adiw	r24, 0x11	; 17
    21b2:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	11 f4       	brne	.+4      	; 0x21be <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    21ba:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    21be:	0f 90       	pop	r0
    21c0:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	8c 87       	std	Y+12, r24	; 0x0c
    21c6:	5c c0       	rjmp	.+184    	; 0x2280 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    21d4:	1c 86       	std	Y+12, r1	; 0x0c
    21d6:	54 c0       	rjmp	.+168    	; 0x2280 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	88 23       	and	r24, r24
    21dc:	31 f4       	brne	.+12     	; 0x21ea <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    21de:	ce 01       	movw	r24, r28
    21e0:	02 96       	adiw	r24, 0x02	; 2
    21e2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    21ee:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
    21f8:	ed 81       	ldd	r30, Y+5	; 0x05
    21fa:	fe 81       	ldd	r31, Y+6	; 0x06
    21fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    21fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2200:	19 f4       	brne	.+6      	; 0x2208 <xQueueGenericSend+0xb0>
    2202:	ed 81       	ldd	r30, Y+5	; 0x05
    2204:	fe 81       	ldd	r31, Y+6	; 0x06
    2206:	15 8e       	std	Z+29, r1	; 0x1d
    2208:	ed 81       	ldd	r30, Y+5	; 0x05
    220a:	fe 81       	ldd	r31, Y+6	; 0x06
    220c:	86 8d       	ldd	r24, Z+30	; 0x1e
    220e:	8f 3f       	cpi	r24, 0xFF	; 255
    2210:	19 f4       	brne	.+6      	; 0x2218 <xQueueGenericSend+0xc0>
    2212:	ed 81       	ldd	r30, Y+5	; 0x05
    2214:	fe 81       	ldd	r31, Y+6	; 0x06
    2216:	16 8e       	std	Z+30, r1	; 0x1e
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    221c:	ce 01       	movw	r24, r28
    221e:	02 96       	adiw	r24, 0x02	; 2
    2220:	9e 01       	movw	r18, r28
    2222:	27 5f       	subi	r18, 0xF7	; 247
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
    2226:	b9 01       	movw	r22, r18
    2228:	0e 94 7d 19 	call	0x32fa	; 0x32fa <xTaskCheckForTimeOut>
    222c:	88 23       	and	r24, r24
    222e:	09 f5       	brne	.+66     	; 0x2272 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	0e 94 4b 14 	call	0x2896	; 0x2896 <prvIsQueueFull>
    2238:	88 23       	and	r24, r24
    223a:	a1 f0       	breq	.+40     	; 0x2264 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	08 96       	adiw	r24, 0x08	; 8
    2242:	29 85       	ldd	r18, Y+9	; 0x09
    2244:	3a 85       	ldd	r19, Y+10	; 0x0a
    2246:	b9 01       	movw	r22, r18
    2248:	0e 94 c6 18 	call	0x318c	; 0x318c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	0e 94 c4 13 	call	0x2788	; 0x2788 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2254:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
    2258:	88 23       	and	r24, r24
    225a:	09 f0       	breq	.+2      	; 0x225e <xQueueGenericSend+0x106>
    225c:	8f cf       	rjmp	.-226    	; 0x217c <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    225e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
    2262:	8c cf       	rjmp	.-232    	; 0x217c <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	0e 94 c4 13 	call	0x2788	; 0x2788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    226c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
    2270:	85 cf       	rjmp	.-246    	; 0x217c <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	0e 94 c4 13 	call	0x2788	; 0x2788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    227a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    227e:	1c 86       	std	Y+12, r1	; 0x0c
    2280:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    2282:	2c 96       	adiw	r28, 0x0c	; 12
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	29 97       	sbiw	r28, 0x09	; 9
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	7e 83       	std	Y+6, r23	; 0x06
    22ae:	6d 83       	std	Y+5, r22	; 0x05
    22b0:	58 87       	std	Y+8, r21	; 0x08
    22b2:	4f 83       	std	Y+7, r20	; 0x07
    22b4:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    22b6:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    22b8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ba:	fc 81       	ldd	r31, Y+4	; 0x04
    22bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    22be:	eb 81       	ldd	r30, Y+3	; 0x03
    22c0:	fc 81       	ldd	r31, Y+4	; 0x04
    22c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    22c4:	98 17       	cp	r25, r24
    22c6:	40 f5       	brcc	.+80     	; 0x2318 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	2d 81       	ldd	r18, Y+5	; 0x05
    22ce:	3e 81       	ldd	r19, Y+6	; 0x06
    22d0:	b9 01       	movw	r22, r18
    22d2:	49 85       	ldd	r20, Y+9	; 0x09
    22d4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    22d8:	eb 81       	ldd	r30, Y+3	; 0x03
    22da:	fc 81       	ldd	r31, Y+4	; 0x04
    22dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    22de:	8f 3f       	cpi	r24, 0xFF	; 255
    22e0:	89 f4       	brne	.+34     	; 0x2304 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22e2:	eb 81       	ldd	r30, Y+3	; 0x03
    22e4:	fc 81       	ldd	r31, Y+4	; 0x04
    22e6:	81 89       	ldd	r24, Z+17	; 0x11
    22e8:	88 23       	and	r24, r24
    22ea:	99 f0       	breq	.+38     	; 0x2312 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	41 96       	adiw	r24, 0x11	; 17
    22f2:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    22f6:	88 23       	and	r24, r24
    22f8:	61 f0       	breq	.+24     	; 0x2312 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    22fa:	ef 81       	ldd	r30, Y+7	; 0x07
    22fc:	f8 85       	ldd	r31, Y+8	; 0x08
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	80 83       	st	Z, r24
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2304:	eb 81       	ldd	r30, Y+3	; 0x03
    2306:	fc 81       	ldd	r31, Y+4	; 0x04
    2308:	86 8d       	ldd	r24, Z+30	; 0x1e
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	eb 81       	ldd	r30, Y+3	; 0x03
    230e:	fc 81       	ldd	r31, Y+4	; 0x04
    2310:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	8a 83       	std	Y+2, r24	; 0x02
    2316:	01 c0       	rjmp	.+2      	; 0x231a <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2318:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    231c:	29 96       	adiw	r28, 0x09	; 9
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	2e 97       	sbiw	r28, 0x0e	; 14
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	98 87       	std	Y+8, r25	; 0x08
    2344:	8f 83       	std	Y+7, r24	; 0x07
    2346:	7a 87       	std	Y+10, r23	; 0x0a
    2348:	69 87       	std	Y+9, r22	; 0x09
    234a:	5c 87       	std	Y+12, r21	; 0x0c
    234c:	4b 87       	std	Y+11, r20	; 0x0b
    234e:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2350:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2358:	ef 81       	ldd	r30, Y+7	; 0x07
    235a:	f8 85       	ldd	r31, Y+8	; 0x08
    235c:	82 8d       	ldd	r24, Z+26	; 0x1a
    235e:	88 23       	and	r24, r24
    2360:	09 f4       	brne	.+2      	; 0x2364 <xQueueGenericReceive+0x36>
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2364:	ef 81       	ldd	r30, Y+7	; 0x07
    2366:	f8 85       	ldd	r31, Y+8	; 0x08
    2368:	86 81       	ldd	r24, Z+6	; 0x06
    236a:	97 81       	ldd	r25, Z+7	; 0x07
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2370:	8f 81       	ldd	r24, Y+7	; 0x07
    2372:	98 85       	ldd	r25, Y+8	; 0x08
    2374:	29 85       	ldd	r18, Y+9	; 0x09
    2376:	3a 85       	ldd	r19, Y+10	; 0x0a
    2378:	b9 01       	movw	r22, r18
    237a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	88 23       	and	r24, r24
    2382:	b1 f4       	brne	.+44     	; 0x23b0 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2384:	ef 81       	ldd	r30, Y+7	; 0x07
    2386:	f8 85       	ldd	r31, Y+8	; 0x08
    2388:	82 8d       	ldd	r24, Z+26	; 0x1a
    238a:	81 50       	subi	r24, 0x01	; 1
    238c:	ef 81       	ldd	r30, Y+7	; 0x07
    238e:	f8 85       	ldd	r31, Y+8	; 0x08
    2390:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2392:	ef 81       	ldd	r30, Y+7	; 0x07
    2394:	f8 85       	ldd	r31, Y+8	; 0x08
    2396:	80 85       	ldd	r24, Z+8	; 0x08
    2398:	88 23       	and	r24, r24
    239a:	f1 f0       	breq	.+60     	; 0x23d8 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    239c:	8f 81       	ldd	r24, Y+7	; 0x07
    239e:	98 85       	ldd	r25, Y+8	; 0x08
    23a0:	08 96       	adiw	r24, 0x08	; 8
    23a2:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	b9 f4       	brne	.+46     	; 0x23d8 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    23aa:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    23b0:	ef 81       	ldd	r30, Y+7	; 0x07
    23b2:	f8 85       	ldd	r31, Y+8	; 0x08
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	97 83       	std	Z+7, r25	; 0x07
    23ba:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23bc:	ef 81       	ldd	r30, Y+7	; 0x07
    23be:	f8 85       	ldd	r31, Y+8	; 0x08
    23c0:	81 89       	ldd	r24, Z+17	; 0x11
    23c2:	88 23       	and	r24, r24
    23c4:	49 f0       	breq	.+18     	; 0x23d8 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23c6:	8f 81       	ldd	r24, Y+7	; 0x07
    23c8:	98 85       	ldd	r25, Y+8	; 0x08
    23ca:	41 96       	adiw	r24, 0x11	; 17
    23cc:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    23d0:	88 23       	and	r24, r24
    23d2:	11 f0       	breq	.+4      	; 0x23d8 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    23d4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    23d8:	0f 90       	pop	r0
    23da:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	8e 87       	std	Y+14, r24	; 0x0e
    23e0:	5c c0       	rjmp	.+184    	; 0x249a <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    23e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	21 f4       	brne	.+8      	; 0x23f2 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    23ea:	0f 90       	pop	r0
    23ec:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    23ee:	1e 86       	std	Y+14, r1	; 0x0e
    23f0:	54 c0       	rjmp	.+168    	; 0x249a <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	88 23       	and	r24, r24
    23f6:	31 f4       	brne	.+12     	; 0x2404 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    23f8:	ce 01       	movw	r24, r28
    23fa:	04 96       	adiw	r24, 0x04	; 4
    23fc:	0e 94 64 19 	call	0x32c8	; 0x32c8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    2404:	0f 90       	pop	r0
    2406:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2408:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	0f 92       	push	r0
    2412:	ef 81       	ldd	r30, Y+7	; 0x07
    2414:	f8 85       	ldd	r31, Y+8	; 0x08
    2416:	85 8d       	ldd	r24, Z+29	; 0x1d
    2418:	8f 3f       	cpi	r24, 0xFF	; 255
    241a:	19 f4       	brne	.+6      	; 0x2422 <xQueueGenericReceive+0xf4>
    241c:	ef 81       	ldd	r30, Y+7	; 0x07
    241e:	f8 85       	ldd	r31, Y+8	; 0x08
    2420:	15 8e       	std	Z+29, r1	; 0x1d
    2422:	ef 81       	ldd	r30, Y+7	; 0x07
    2424:	f8 85       	ldd	r31, Y+8	; 0x08
    2426:	86 8d       	ldd	r24, Z+30	; 0x1e
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	19 f4       	brne	.+6      	; 0x2432 <xQueueGenericReceive+0x104>
    242c:	ef 81       	ldd	r30, Y+7	; 0x07
    242e:	f8 85       	ldd	r31, Y+8	; 0x08
    2430:	16 8e       	std	Z+30, r1	; 0x1e
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2436:	ce 01       	movw	r24, r28
    2438:	04 96       	adiw	r24, 0x04	; 4
    243a:	9e 01       	movw	r18, r28
    243c:	25 5f       	subi	r18, 0xF5	; 245
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	b9 01       	movw	r22, r18
    2442:	0e 94 7d 19 	call	0x32fa	; 0x32fa <xTaskCheckForTimeOut>
    2446:	88 23       	and	r24, r24
    2448:	09 f5       	brne	.+66     	; 0x248c <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    244a:	8f 81       	ldd	r24, Y+7	; 0x07
    244c:	98 85       	ldd	r25, Y+8	; 0x08
    244e:	0e 94 18 14 	call	0x2830	; 0x2830 <prvIsQueueEmpty>
    2452:	88 23       	and	r24, r24
    2454:	a1 f0       	breq	.+40     	; 0x247e <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	41 96       	adiw	r24, 0x11	; 17
    245c:	2b 85       	ldd	r18, Y+11	; 0x0b
    245e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2460:	b9 01       	movw	r22, r18
    2462:	0e 94 c6 18 	call	0x318c	; 0x318c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	98 85       	ldd	r25, Y+8	; 0x08
    246a:	0e 94 c4 13 	call	0x2788	; 0x2788 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    246e:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
    2472:	88 23       	and	r24, r24
    2474:	09 f0       	breq	.+2      	; 0x2478 <xQueueGenericReceive+0x14a>
    2476:	6d cf       	rjmp	.-294    	; 0x2352 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    2478:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
    247c:	6a cf       	rjmp	.-300    	; 0x2352 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	98 85       	ldd	r25, Y+8	; 0x08
    2482:	0e 94 c4 13 	call	0x2788	; 0x2788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2486:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
    248a:	63 cf       	rjmp	.-314    	; 0x2352 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    248c:	8f 81       	ldd	r24, Y+7	; 0x07
    248e:	98 85       	ldd	r25, Y+8	; 0x08
    2490:	0e 94 c4 13 	call	0x2788	; 0x2788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2494:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2498:	1e 86       	std	Y+14, r1	; 0x0e
    249a:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    249c:	2e 96       	adiw	r28, 0x0e	; 14
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	28 97       	sbiw	r28, 0x08	; 8
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	7e 83       	std	Y+6, r23	; 0x06
    24c8:	6d 83       	std	Y+5, r22	; 0x05
    24ca:	58 87       	std	Y+8, r21	; 0x08
    24cc:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24ce:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    24d0:	eb 81       	ldd	r30, Y+3	; 0x03
    24d2:	fc 81       	ldd	r31, Y+4	; 0x04
    24d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    24d6:	88 23       	and	r24, r24
    24d8:	71 f1       	breq	.+92     	; 0x2536 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	2d 81       	ldd	r18, Y+5	; 0x05
    24e0:	3e 81       	ldd	r19, Y+6	; 0x06
    24e2:	b9 01       	movw	r22, r18
    24e4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ee:	81 50       	subi	r24, 0x01	; 1
    24f0:	eb 81       	ldd	r30, Y+3	; 0x03
    24f2:	fc 81       	ldd	r31, Y+4	; 0x04
    24f4:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    24f6:	eb 81       	ldd	r30, Y+3	; 0x03
    24f8:	fc 81       	ldd	r31, Y+4	; 0x04
    24fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    24fc:	8f 3f       	cpi	r24, 0xFF	; 255
    24fe:	89 f4       	brne	.+34     	; 0x2522 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2500:	eb 81       	ldd	r30, Y+3	; 0x03
    2502:	fc 81       	ldd	r31, Y+4	; 0x04
    2504:	80 85       	ldd	r24, Z+8	; 0x08
    2506:	88 23       	and	r24, r24
    2508:	99 f0       	breq	.+38     	; 0x2530 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	08 96       	adiw	r24, 0x08	; 8
    2510:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    2514:	88 23       	and	r24, r24
    2516:	61 f0       	breq	.+24     	; 0x2530 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2518:	ef 81       	ldd	r30, Y+7	; 0x07
    251a:	f8 85       	ldd	r31, Y+8	; 0x08
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	80 83       	st	Z, r24
    2520:	07 c0       	rjmp	.+14     	; 0x2530 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2522:	eb 81       	ldd	r30, Y+3	; 0x03
    2524:	fc 81       	ldd	r31, Y+4	; 0x04
    2526:	85 8d       	ldd	r24, Z+29	; 0x1d
    2528:	8f 5f       	subi	r24, 0xFF	; 255
    252a:	eb 81       	ldd	r30, Y+3	; 0x03
    252c:	fc 81       	ldd	r31, Y+4	; 0x04
    252e:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    2536:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
}
    253a:	28 96       	adiw	r28, 0x08	; 8
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <uxQueueMessagesWaiting+0x6>
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2562:	ea 81       	ldd	r30, Y+2	; 0x02
    2564:	fb 81       	ldd	r31, Y+3	; 0x03
    2566:	82 8d       	ldd	r24, Z+26	; 0x1a
    2568:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    256a:	0f 90       	pop	r0
    256c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <uxQueueMessagesWaitingFromISR+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9b 83       	std	Y+3, r25	; 0x03
    258a:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    258c:	ea 81       	ldd	r30, Y+2	; 0x02
    258e:	fb 81       	ldd	r31, Y+3	; 0x03
    2590:	82 8d       	ldd	r24, Z+26	; 0x1a
    2592:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2594:	89 81       	ldd	r24, Y+1	; 0x01
}
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <vQueueDelete+0x6>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    25b0:	e9 81       	ldd	r30, Y+1	; 0x01
    25b2:	fa 81       	ldd	r31, Y+2	; 0x02
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	0e 94 99 09 	call	0x1332	; 0x1332 <vPortFree>
	vPortFree( pxQueue );
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	0e 94 99 09 	call	0x1332	; 0x1332 <vPortFree>
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <prvCopyDataToQueue+0x6>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <prvCopyDataToQueue+0x8>
    25d6:	0f 92       	push	r0
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	7c 83       	std	Y+4, r23	; 0x04
    25e2:	6b 83       	std	Y+3, r22	; 0x03
    25e4:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    25e6:	e9 81       	ldd	r30, Y+1	; 0x01
    25e8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    25ec:	88 23       	and	r24, r24
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <prvCopyDataToQueue+0x24>
    25f0:	74 c0       	rjmp	.+232    	; 0x26da <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	88 23       	and	r24, r24
    25f6:	99 f5       	brne	.+102    	; 0x265e <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    25f8:	e9 81       	ldd	r30, Y+1	; 0x01
    25fa:	fa 81       	ldd	r31, Y+2	; 0x02
    25fc:	64 81       	ldd	r22, Z+4	; 0x04
    25fe:	75 81       	ldd	r23, Z+5	; 0x05
    2600:	e9 81       	ldd	r30, Y+1	; 0x01
    2602:	fa 81       	ldd	r31, Y+2	; 0x02
    2604:	84 8d       	ldd	r24, Z+28	; 0x1c
    2606:	48 2f       	mov	r20, r24
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	cb 01       	movw	r24, r22
    2610:	b9 01       	movw	r22, r18
    2612:	0e 94 a6 1b 	call	0x374c	; 0x374c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2616:	e9 81       	ldd	r30, Y+1	; 0x01
    2618:	fa 81       	ldd	r31, Y+2	; 0x02
    261a:	24 81       	ldd	r18, Z+4	; 0x04
    261c:	35 81       	ldd	r19, Z+5	; 0x05
    261e:	e9 81       	ldd	r30, Y+1	; 0x01
    2620:	fa 81       	ldd	r31, Y+2	; 0x02
    2622:	84 8d       	ldd	r24, Z+28	; 0x1c
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	82 0f       	add	r24, r18
    262a:	93 1f       	adc	r25, r19
    262c:	e9 81       	ldd	r30, Y+1	; 0x01
    262e:	fa 81       	ldd	r31, Y+2	; 0x02
    2630:	95 83       	std	Z+5, r25	; 0x05
    2632:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2634:	e9 81       	ldd	r30, Y+1	; 0x01
    2636:	fa 81       	ldd	r31, Y+2	; 0x02
    2638:	24 81       	ldd	r18, Z+4	; 0x04
    263a:	35 81       	ldd	r19, Z+5	; 0x05
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	28 17       	cp	r18, r24
    2646:	39 07       	cpc	r19, r25
    2648:	08 f4       	brcc	.+2      	; 0x264c <prvCopyDataToQueue+0x7e>
    264a:	47 c0       	rjmp	.+142    	; 0x26da <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    264c:	e9 81       	ldd	r30, Y+1	; 0x01
    264e:	fa 81       	ldd	r31, Y+2	; 0x02
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	e9 81       	ldd	r30, Y+1	; 0x01
    2656:	fa 81       	ldd	r31, Y+2	; 0x02
    2658:	95 83       	std	Z+5, r25	; 0x05
    265a:	84 83       	std	Z+4, r24	; 0x04
    265c:	3e c0       	rjmp	.+124    	; 0x26da <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    265e:	e9 81       	ldd	r30, Y+1	; 0x01
    2660:	fa 81       	ldd	r31, Y+2	; 0x02
    2662:	66 81       	ldd	r22, Z+6	; 0x06
    2664:	77 81       	ldd	r23, Z+7	; 0x07
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	84 8d       	ldd	r24, Z+28	; 0x1c
    266c:	48 2f       	mov	r20, r24
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	cb 01       	movw	r24, r22
    2676:	b9 01       	movw	r22, r18
    2678:	0e 94 a6 1b 	call	0x374c	; 0x374c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    267c:	e9 81       	ldd	r30, Y+1	; 0x01
    267e:	fa 81       	ldd	r31, Y+2	; 0x02
    2680:	26 81       	ldd	r18, Z+6	; 0x06
    2682:	37 81       	ldd	r19, Z+7	; 0x07
    2684:	e9 81       	ldd	r30, Y+1	; 0x01
    2686:	fa 81       	ldd	r31, Y+2	; 0x02
    2688:	84 8d       	ldd	r24, Z+28	; 0x1c
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	90 95       	com	r25
    2690:	81 95       	neg	r24
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	82 0f       	add	r24, r18
    2696:	93 1f       	adc	r25, r19
    2698:	e9 81       	ldd	r30, Y+1	; 0x01
    269a:	fa 81       	ldd	r31, Y+2	; 0x02
    269c:	97 83       	std	Z+7, r25	; 0x07
    269e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	26 81       	ldd	r18, Z+6	; 0x06
    26a6:	37 81       	ldd	r19, Z+7	; 0x07
    26a8:	e9 81       	ldd	r30, Y+1	; 0x01
    26aa:	fa 81       	ldd	r31, Y+2	; 0x02
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	28 17       	cp	r18, r24
    26b2:	39 07       	cpc	r19, r25
    26b4:	90 f4       	brcc	.+36     	; 0x26da <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    26b6:	e9 81       	ldd	r30, Y+1	; 0x01
    26b8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ba:	22 81       	ldd	r18, Z+2	; 0x02
    26bc:	33 81       	ldd	r19, Z+3	; 0x03
    26be:	e9 81       	ldd	r30, Y+1	; 0x01
    26c0:	fa 81       	ldd	r31, Y+2	; 0x02
    26c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	90 95       	com	r25
    26ca:	81 95       	neg	r24
    26cc:	9f 4f       	sbci	r25, 0xFF	; 255
    26ce:	82 0f       	add	r24, r18
    26d0:	93 1f       	adc	r25, r19
    26d2:	e9 81       	ldd	r30, Y+1	; 0x01
    26d4:	fa 81       	ldd	r31, Y+2	; 0x02
    26d6:	97 83       	std	Z+7, r25	; 0x07
    26d8:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	82 8d       	ldd	r24, Z+26	; 0x1a
    26e0:	8f 5f       	subi	r24, 0xFF	; 255
    26e2:	e9 81       	ldd	r30, Y+1	; 0x01
    26e4:	fa 81       	ldd	r31, Y+2	; 0x02
    26e6:	82 8f       	std	Z+26, r24	; 0x1a
}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <prvCopyDataFromQueue+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <prvCopyDataFromQueue+0x8>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	7c 83       	std	Y+4, r23	; 0x04
    270a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    270c:	e9 81       	ldd	r30, Y+1	; 0x01
    270e:	fa 81       	ldd	r31, Y+2	; 0x02
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	89 f1       	breq	.+98     	; 0x277a <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2718:	e9 81       	ldd	r30, Y+1	; 0x01
    271a:	fa 81       	ldd	r31, Y+2	; 0x02
    271c:	26 81       	ldd	r18, Z+6	; 0x06
    271e:	37 81       	ldd	r19, Z+7	; 0x07
    2720:	e9 81       	ldd	r30, Y+1	; 0x01
    2722:	fa 81       	ldd	r31, Y+2	; 0x02
    2724:	84 8d       	ldd	r24, Z+28	; 0x1c
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	82 0f       	add	r24, r18
    272c:	93 1f       	adc	r25, r19
    272e:	e9 81       	ldd	r30, Y+1	; 0x01
    2730:	fa 81       	ldd	r31, Y+2	; 0x02
    2732:	97 83       	std	Z+7, r25	; 0x07
    2734:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	26 81       	ldd	r18, Z+6	; 0x06
    273c:	37 81       	ldd	r19, Z+7	; 0x07
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	fa 81       	ldd	r31, Y+2	; 0x02
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	28 17       	cp	r18, r24
    2748:	39 07       	cpc	r19, r25
    274a:	40 f0       	brcs	.+16     	; 0x275c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	e9 81       	ldd	r30, Y+1	; 0x01
    2756:	fa 81       	ldd	r31, Y+2	; 0x02
    2758:	97 83       	std	Z+7, r25	; 0x07
    275a:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	46 81       	ldd	r20, Z+6	; 0x06
    2762:	57 81       	ldd	r21, Z+7	; 0x07
    2764:	e9 81       	ldd	r30, Y+1	; 0x01
    2766:	fa 81       	ldd	r31, Y+2	; 0x02
    2768:	84 8d       	ldd	r24, Z+28	; 0x1c
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	ba 01       	movw	r22, r20
    2774:	a9 01       	movw	r20, r18
    2776:	0e 94 a6 1b 	call	0x374c	; 0x374c <memcpy>
	}
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <prvUnlockQueue+0x6>
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	0f 92       	push	r0
    279c:	15 c0       	rjmp	.+42     	; 0x27c8 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    279e:	e9 81       	ldd	r30, Y+1	; 0x01
    27a0:	fa 81       	ldd	r31, Y+2	; 0x02
    27a2:	81 89       	ldd	r24, Z+17	; 0x11
    27a4:	88 23       	and	r24, r24
    27a6:	a9 f0       	breq	.+42     	; 0x27d2 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	41 96       	adiw	r24, 0x11	; 17
    27ae:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    27b2:	88 23       	and	r24, r24
    27b4:	11 f0       	breq	.+4      	; 0x27ba <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    27b6:	0e 94 da 19 	call	0x33b4	; 0x33b4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    27ba:	e9 81       	ldd	r30, Y+1	; 0x01
    27bc:	fa 81       	ldd	r31, Y+2	; 0x02
    27be:	86 8d       	ldd	r24, Z+30	; 0x1e
    27c0:	81 50       	subi	r24, 0x01	; 1
    27c2:	e9 81       	ldd	r30, Y+1	; 0x01
    27c4:	fa 81       	ldd	r31, Y+2	; 0x02
    27c6:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    27c8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ca:	fa 81       	ldd	r31, Y+2	; 0x02
    27cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    27ce:	18 16       	cp	r1, r24
    27d0:	34 f3       	brlt	.-52     	; 0x279e <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    27d2:	e9 81       	ldd	r30, Y+1	; 0x01
    27d4:	fa 81       	ldd	r31, Y+2	; 0x02
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	0f 92       	push	r0
    27e4:	15 c0       	rjmp	.+42     	; 0x2810 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	80 85       	ldd	r24, Z+8	; 0x08
    27ec:	88 23       	and	r24, r24
    27ee:	a9 f0       	breq	.+42     	; 0x281a <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	08 96       	adiw	r24, 0x08	; 8
    27f6:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskRemoveFromEventList>
    27fa:	88 23       	and	r24, r24
    27fc:	11 f0       	breq	.+4      	; 0x2802 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    27fe:	0e 94 da 19 	call	0x33b4	; 0x33b4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	85 8d       	ldd	r24, Z+29	; 0x1d
    2808:	81 50       	subi	r24, 0x01	; 1
    280a:	e9 81       	ldd	r30, Y+1	; 0x01
    280c:	fa 81       	ldd	r31, Y+2	; 0x02
    280e:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	85 8d       	ldd	r24, Z+29	; 0x1d
    2816:	18 16       	cp	r1, r24
    2818:	34 f3       	brlt	.-52     	; 0x27e6 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <prvIsQueueEmpty+0x6>
    2836:	0f 92       	push	r0
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	9b 83       	std	Y+3, r25	; 0x03
    283e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2846:	ea 81       	ldd	r30, Y+2	; 0x02
    2848:	fb 81       	ldd	r31, Y+3	; 0x03
    284a:	82 8d       	ldd	r24, Z+26	; 0x1a
    284c:	19 82       	std	Y+1, r1	; 0x01
    284e:	88 23       	and	r24, r24
    2850:	11 f4       	brne	.+4      	; 0x2856 <prvIsQueueEmpty+0x26>
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2856:	0f 90       	pop	r0
    2858:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    285a:	89 81       	ldd	r24, Y+1	; 0x01
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <xQueueIsQueueEmptyFromISR+0x6>
    286e:	0f 92       	push	r0
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	9b 83       	std	Y+3, r25	; 0x03
    2876:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2878:	ea 81       	ldd	r30, Y+2	; 0x02
    287a:	fb 81       	ldd	r31, Y+3	; 0x03
    287c:	82 8d       	ldd	r24, Z+26	; 0x1a
    287e:	19 82       	std	Y+1, r1	; 0x01
    2880:	88 23       	and	r24, r24
    2882:	11 f4       	brne	.+4      	; 0x2888 <xQueueIsQueueEmptyFromISR+0x20>
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2888:	89 81       	ldd	r24, Y+1	; 0x01
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <prvIsQueueFull+0x6>
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    28ac:	ea 81       	ldd	r30, Y+2	; 0x02
    28ae:	fb 81       	ldd	r31, Y+3	; 0x03
    28b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    28b2:	ea 81       	ldd	r30, Y+2	; 0x02
    28b4:	fb 81       	ldd	r31, Y+3	; 0x03
    28b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    28b8:	19 82       	std	Y+1, r1	; 0x01
    28ba:	98 17       	cp	r25, r24
    28bc:	11 f4       	brne	.+4      	; 0x28c2 <prvIsQueueFull+0x2c>
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    28c2:	0f 90       	pop	r0
    28c4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <xQueueIsQueueFullFromISR+0x6>
    28da:	0f 92       	push	r0
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9b 83       	std	Y+3, r25	; 0x03
    28e2:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    28e4:	ea 81       	ldd	r30, Y+2	; 0x02
    28e6:	fb 81       	ldd	r31, Y+3	; 0x03
    28e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    28ea:	ea 81       	ldd	r30, Y+2	; 0x02
    28ec:	fb 81       	ldd	r31, Y+3	; 0x03
    28ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    28f0:	19 82       	std	Y+1, r1	; 0x01
    28f2:	98 17       	cp	r25, r24
    28f4:	11 f4       	brne	.+4      	; 0x28fa <xQueueIsQueueFullFromISR+0x26>
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	64 97       	sbiw	r28, 0x14	; 20
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	9f 83       	std	Y+7, r25	; 0x07
    292e:	8e 83       	std	Y+6, r24	; 0x06
    2930:	79 87       	std	Y+9, r23	; 0x09
    2932:	68 87       	std	Y+8, r22	; 0x08
    2934:	5b 87       	std	Y+11, r21	; 0x0b
    2936:	4a 87       	std	Y+10, r20	; 0x0a
    2938:	3d 87       	std	Y+13, r19	; 0x0d
    293a:	2c 87       	std	Y+12, r18	; 0x0c
    293c:	0e 87       	std	Y+14, r16	; 0x0e
    293e:	f8 8a       	std	Y+16, r15	; 0x10
    2940:	ef 86       	std	Y+15, r14	; 0x0f
    2942:	da 8a       	std	Y+18, r13	; 0x12
    2944:	c9 8a       	std	Y+17, r12	; 0x11
    2946:	bc 8a       	std	Y+20, r11	; 0x14
    2948:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    294a:	8a 85       	ldd	r24, Y+10	; 0x0a
    294c:	9b 85       	ldd	r25, Y+11	; 0x0b
    294e:	29 89       	ldd	r18, Y+17	; 0x11
    2950:	3a 89       	ldd	r19, Y+18	; 0x12
    2952:	b9 01       	movw	r22, r18
    2954:	0e 94 09 1b 	call	0x3612	; 0x3612 <prvAllocateTCBAndStack>
    2958:	9c 83       	std	Y+4, r25	; 0x04
    295a:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	09 f4       	brne	.+2      	; 0x2966 <xTaskGenericCreate+0x5e>
    2964:	99 c0       	rjmp	.+306    	; 0x2a98 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2966:	eb 81       	ldd	r30, Y+3	; 0x03
    2968:	fc 81       	ldd	r31, Y+4	; 0x04
    296a:	27 89       	ldd	r18, Z+23	; 0x17
    296c:	30 8d       	ldd	r19, Z+24	; 0x18
    296e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2970:	9b 85       	ldd	r25, Y+11	; 0x0b
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	82 0f       	add	r24, r18
    2976:	93 1f       	adc	r25, r19
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	28 85       	ldd	r18, Y+8	; 0x08
    2982:	39 85       	ldd	r19, Y+9	; 0x09
    2984:	eb 89       	ldd	r30, Y+19	; 0x13
    2986:	fc 89       	ldd	r31, Y+20	; 0x14
    2988:	aa 85       	ldd	r26, Y+10	; 0x0a
    298a:	bb 85       	ldd	r27, Y+11	; 0x0b
    298c:	b9 01       	movw	r22, r18
    298e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2990:	9f 01       	movw	r18, r30
    2992:	8d 01       	movw	r16, r26
    2994:	0e 94 ee 19 	call	0x33dc	; 0x33dc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	2e 81       	ldd	r18, Y+6	; 0x06
    299e:	3f 81       	ldd	r19, Y+7	; 0x07
    29a0:	4c 85       	ldd	r20, Y+12	; 0x0c
    29a2:	5d 85       	ldd	r21, Y+13	; 0x0d
    29a4:	b9 01       	movw	r22, r18
    29a6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <pxPortInitialiseStack>
    29aa:	eb 81       	ldd	r30, Y+3	; 0x03
    29ac:	fc 81       	ldd	r31, Y+4	; 0x04
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    29b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b4:	98 89       	ldd	r25, Y+16	; 0x10
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	31 f0       	breq	.+12     	; 0x29c6 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    29ba:	ef 85       	ldd	r30, Y+15	; 0x0f
    29bc:	f8 89       	ldd	r31, Y+16	; 0x10
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    29cc:	80 91 1f 03 	lds	r24, 0x031F
    29d0:	8f 5f       	subi	r24, 0xFF	; 255
    29d2:	80 93 1f 03 	sts	0x031F, r24
			if( pxCurrentTCB == NULL )
    29d6:	80 91 1c 03 	lds	r24, 0x031C
    29da:	90 91 1d 03 	lds	r25, 0x031D
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f4       	brne	.+26     	; 0x29fc <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	90 93 1d 03 	sts	0x031D, r25
    29ea:	80 93 1c 03 	sts	0x031C, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    29ee:	80 91 1f 03 	lds	r24, 0x031F
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	a9 f4       	brne	.+42     	; 0x2a20 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    29f6:	0e 94 45 1a 	call	0x348a	; 0x348a <prvInitialiseTaskLists>
    29fa:	12 c0       	rjmp	.+36     	; 0x2a20 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    29fc:	80 91 24 03 	lds	r24, 0x0324
    2a00:	88 23       	and	r24, r24
    2a02:	71 f4       	brne	.+28     	; 0x2a20 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2a04:	e0 91 1c 03 	lds	r30, 0x031C
    2a08:	f0 91 1d 03 	lds	r31, 0x031D
    2a0c:	96 89       	ldd	r25, Z+22	; 0x16
    2a0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a10:	89 17       	cp	r24, r25
    2a12:	30 f0       	brcs	.+12     	; 0x2a20 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	90 93 1d 03 	sts	0x031D, r25
    2a1c:	80 93 1c 03 	sts	0x031C, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2a20:	eb 81       	ldd	r30, Y+3	; 0x03
    2a22:	fc 81       	ldd	r31, Y+4	; 0x04
    2a24:	96 89       	ldd	r25, Z+22	; 0x16
    2a26:	80 91 22 03 	lds	r24, 0x0322
    2a2a:	89 17       	cp	r24, r25
    2a2c:	28 f4       	brcc	.+10     	; 0x2a38 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a30:	fc 81       	ldd	r31, Y+4	; 0x04
    2a32:	86 89       	ldd	r24, Z+22	; 0x16
    2a34:	80 93 22 03 	sts	0x0322, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2a38:	80 91 29 03 	lds	r24, 0x0329
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	80 93 29 03 	sts	0x0329, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2a42:	eb 81       	ldd	r30, Y+3	; 0x03
    2a44:	fc 81       	ldd	r31, Y+4	; 0x04
    2a46:	96 89       	ldd	r25, Z+22	; 0x16
    2a48:	80 91 23 03 	lds	r24, 0x0323
    2a4c:	89 17       	cp	r24, r25
    2a4e:	28 f4       	brcc	.+10     	; 0x2a5a <xTaskGenericCreate+0x152>
    2a50:	eb 81       	ldd	r30, Y+3	; 0x03
    2a52:	fc 81       	ldd	r31, Y+4	; 0x04
    2a54:	86 89       	ldd	r24, Z+22	; 0x16
    2a56:	80 93 23 03 	sts	0x0323, r24
    2a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a5e:	86 89       	ldd	r24, Z+22	; 0x16
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	c9 01       	movw	r24, r18
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	82 0f       	add	r24, r18
    2a74:	93 1f       	adc	r25, r19
    2a76:	ac 01       	movw	r20, r24
    2a78:	46 5d       	subi	r20, 0xD6	; 214
    2a7a:	5c 4f       	sbci	r21, 0xFC	; 252
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	9c 01       	movw	r18, r24
    2a82:	2e 5f       	subi	r18, 0xFE	; 254
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	ca 01       	movw	r24, r20
    2a88:	b9 01       	movw	r22, r18
    2a8a:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>

			xReturn = pdPASS;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2a92:	0f 90       	pop	r0
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	71 f4       	brne	.+28     	; 0x2abe <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    2aa2:	80 91 24 03 	lds	r24, 0x0324
    2aa6:	88 23       	and	r24, r24
    2aa8:	51 f0       	breq	.+20     	; 0x2abe <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2aaa:	e0 91 1c 03 	lds	r30, 0x031C
    2aae:	f0 91 1d 03 	lds	r31, 0x031D
    2ab2:	96 89       	ldd	r25, Z+22	; 0x16
    2ab4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ab6:	98 17       	cp	r25, r24
    2ab8:	10 f4       	brcc	.+4      	; 0x2abe <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    2aba:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
			}
		}
	}

	return xReturn;
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ac0:	64 96       	adiw	r28, 0x14	; 20
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	bf 90       	pop	r11
    2ade:	af 90       	pop	r10
    2ae0:	08 95       	ret

00002ae2 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <vTaskDelete+0x6>
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <vTaskDelete+0x8>
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <vTaskDelete+0xa>
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2afa:	20 91 1c 03 	lds	r18, 0x031C
    2afe:	30 91 1d 03 	lds	r19, 0x031D
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	82 17       	cp	r24, r18
    2b08:	93 07       	cpc	r25, r19
    2b0a:	11 f4       	brne	.+4      	; 0x2b10 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    2b0c:	1c 82       	std	Y+4, r1	; 0x04
    2b0e:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	39 f4       	brne	.+14     	; 0x2b26 <vTaskDelete+0x44>
    2b18:	80 91 1c 03 	lds	r24, 0x031C
    2b1c:	90 91 1d 03 	lds	r25, 0x031D
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <vTaskDelete+0x4c>
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	02 96       	adiw	r24, 0x02	; 2
    2b3c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2b40:	e9 81       	ldd	r30, Y+1	; 0x01
    2b42:	fa 81       	ldd	r31, Y+2	; 0x02
    2b44:	84 89       	ldd	r24, Z+20	; 0x14
    2b46:	95 89       	ldd	r25, Z+21	; 0x15
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	29 f0       	breq	.+10     	; 0x2b56 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	0c 96       	adiw	r24, 0x0c	; 12
    2b52:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	9c 01       	movw	r18, r24
    2b5c:	2e 5f       	subi	r18, 0xFE	; 254
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	86 e7       	ldi	r24, 0x76	; 118
    2b62:	93 e0       	ldi	r25, 0x03	; 3
    2b64:	b9 01       	movw	r22, r18
    2b66:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2b6a:	80 91 1e 03 	lds	r24, 0x031E
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	80 93 1e 03 	sts	0x031E, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2b74:	80 91 29 03 	lds	r24, 0x0329
    2b78:	8f 5f       	subi	r24, 0xFF	; 255
    2b7a:	80 93 29 03 	sts	0x0329, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2b82:	80 91 24 03 	lds	r24, 0x0324
    2b86:	88 23       	and	r24, r24
    2b88:	31 f0       	breq	.+12     	; 0x2b96 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	11 f4       	brne	.+4      	; 0x2b96 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    2b92:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
			}
		}
	}
    2b96:	26 96       	adiw	r28, 0x06	; 6
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	28 97       	sbiw	r28, 0x08	; 8
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	78 87       	std	Y+8, r23	; 0x08
    2bc2:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    2bc4:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    2bc6:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2bca:	ed 81       	ldd	r30, Y+5	; 0x05
    2bcc:	fe 81       	ldd	r31, Y+6	; 0x06
    2bce:	20 81       	ld	r18, Z
    2bd0:	31 81       	ldd	r19, Z+1	; 0x01
    2bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd4:	98 85       	ldd	r25, Y+8	; 0x08
    2bd6:	82 0f       	add	r24, r18
    2bd8:	93 1f       	adc	r25, r19
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    2bde:	ed 81       	ldd	r30, Y+5	; 0x05
    2be0:	fe 81       	ldd	r31, Y+6	; 0x06
    2be2:	20 81       	ld	r18, Z
    2be4:	31 81       	ldd	r19, Z+1	; 0x01
    2be6:	80 91 20 03 	lds	r24, 0x0320
    2bea:	90 91 21 03 	lds	r25, 0x0321
    2bee:	82 17       	cp	r24, r18
    2bf0:	93 07       	cpc	r25, r19
    2bf2:	a8 f4       	brcc	.+42     	; 0x2c1e <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    2bf4:	ed 81       	ldd	r30, Y+5	; 0x05
    2bf6:	fe 81       	ldd	r31, Y+6	; 0x06
    2bf8:	20 81       	ld	r18, Z
    2bfa:	31 81       	ldd	r19, Z+1	; 0x01
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	82 17       	cp	r24, r18
    2c02:	93 07       	cpc	r25, r19
    2c04:	00 f5       	brcc	.+64     	; 0x2c46 <vTaskDelayUntil+0x9e>
    2c06:	20 91 20 03 	lds	r18, 0x0320
    2c0a:	30 91 21 03 	lds	r19, 0x0321
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	28 17       	cp	r18, r24
    2c14:	39 07       	cpc	r19, r25
    2c16:	b8 f4       	brcc	.+46     	; 0x2c46 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	14 c0       	rjmp	.+40     	; 0x2c46 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2c1e:	ed 81       	ldd	r30, Y+5	; 0x05
    2c20:	fe 81       	ldd	r31, Y+6	; 0x06
    2c22:	20 81       	ld	r18, Z
    2c24:	31 81       	ldd	r19, Z+1	; 0x01
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	82 17       	cp	r24, r18
    2c2c:	93 07       	cpc	r25, r19
    2c2e:	48 f0       	brcs	.+18     	; 0x2c42 <vTaskDelayUntil+0x9a>
    2c30:	20 91 20 03 	lds	r18, 0x0320
    2c34:	30 91 21 03 	lds	r19, 0x0321
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	28 17       	cp	r18, r24
    2c3e:	39 07       	cpc	r19, r25
    2c40:	10 f4       	brcc	.+4      	; 0x2c46 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2c46:	ed 81       	ldd	r30, Y+5	; 0x05
    2c48:	fe 81       	ldd	r31, Y+6	; 0x06
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	88 23       	and	r24, r24
    2c56:	59 f0       	breq	.+22     	; 0x2c6e <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2c58:	80 91 1c 03 	lds	r24, 0x031C
    2c5c:	90 91 1d 03 	lds	r25, 0x031D
    2c60:	02 96       	adiw	r24, 0x02	; 2
    2c62:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2c6e:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
    2c72:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	88 23       	and	r24, r24
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    2c7a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
		}
	}
    2c7e:	28 96       	adiw	r28, 0x08	; 8
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <vTaskDelay+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <vTaskDelay+0x8>
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	9d 83       	std	Y+5, r25	; 0x05
    2ca0:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2ca2:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	d1 f0       	breq	.+52     	; 0x2ce0 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    2cac:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2cb0:	20 91 20 03 	lds	r18, 0x0320
    2cb4:	30 91 21 03 	lds	r19, 0x0321
    2cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cba:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbc:	82 0f       	add	r24, r18
    2cbe:	93 1f       	adc	r25, r19
    2cc0:	9b 83       	std	Y+3, r25	; 0x03
    2cc2:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2cc4:	80 91 1c 03 	lds	r24, 0x031C
    2cc8:	90 91 1d 03 	lds	r25, 0x031D
    2ccc:	02 96       	adiw	r24, 0x02	; 2
    2cce:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2cda:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>
    2cde:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	88 23       	and	r24, r24
    2ce4:	11 f4       	brne	.+4      	; 0x2cea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    2ce6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
		}
	}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    2cfa:	af 92       	push	r10
    2cfc:	bf 92       	push	r11
    2cfe:	cf 92       	push	r12
    2d00:	df 92       	push	r13
    2d02:	ef 92       	push	r14
    2d04:	ff 92       	push	r15
    2d06:	0f 93       	push	r16
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	0f 92       	push	r0
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    2d12:	28 e7       	ldi	r18, 0x78	; 120
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	84 ee       	ldi	r24, 0xE4	; 228
    2d18:	99 e1       	ldi	r25, 0x19	; 25
    2d1a:	b9 01       	movw	r22, r18
    2d1c:	45 e5       	ldi	r20, 0x55	; 85
    2d1e:	50 e0       	ldi	r21, 0x00	; 0
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	00 e0       	ldi	r16, 0x00	; 0
    2d26:	ee 24       	eor	r14, r14
    2d28:	ff 24       	eor	r15, r15
    2d2a:	cc 24       	eor	r12, r12
    2d2c:	dd 24       	eor	r13, r13
    2d2e:	aa 24       	eor	r10, r10
    2d30:	bb 24       	eor	r11, r11
    2d32:	0e 94 84 14 	call	0x2908	; 0x2908 <xTaskGenericCreate>
    2d36:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	51 f4       	brne	.+20     	; 0x2d52 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2d3e:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	80 93 24 03 	sts	0x0324, r24
		xTickCount = ( portTickType ) 0U;
    2d46:	10 92 21 03 	sts	0x0321, r1
    2d4a:	10 92 20 03 	sts	0x0320, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2d4e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	df 90       	pop	r13
    2d60:	cf 90       	pop	r12
    2d62:	bf 90       	pop	r11
    2d64:	af 90       	pop	r10
    2d66:	08 95       	ret

00002d68 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2d70:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2d72:	10 92 24 03 	sts	0x0324, r1
	vPortEndScheduler();
    2d76:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <vPortEndScheduler>
}
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2d88:	80 91 25 03 	lds	r24, 0x0325
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	80 93 25 03 	sts	0x0325, r24
}
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <xTaskResumeAll+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <xTaskResumeAll+0x8>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2da4:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2dac:	80 91 25 03 	lds	r24, 0x0325
    2db0:	81 50       	subi	r24, 0x01	; 1
    2db2:	80 93 25 03 	sts	0x0325, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2db6:	80 91 25 03 	lds	r24, 0x0325
    2dba:	88 23       	and	r24, r24
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <xTaskResumeAll+0x28>
    2dbe:	6c c0       	rjmp	.+216    	; 0x2e98 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2dc0:	80 91 1f 03 	lds	r24, 0x031F
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <xTaskResumeAll+0x32>
    2dc8:	67 c0       	rjmp	.+206    	; 0x2e98 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    2dca:	19 82       	std	Y+1, r1	; 0x01
    2dcc:	41 c0       	rjmp	.+130    	; 0x2e50 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2dce:	e0 91 72 03 	lds	r30, 0x0372
    2dd2:	f0 91 73 03 	lds	r31, 0x0373
    2dd6:	86 81       	ldd	r24, Z+6	; 0x06
    2dd8:	97 81       	ldd	r25, Z+7	; 0x07
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	0c 96       	adiw	r24, 0x0c	; 12
    2de4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	02 96       	adiw	r24, 0x02	; 2
    2dee:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2df2:	eb 81       	ldd	r30, Y+3	; 0x03
    2df4:	fc 81       	ldd	r31, Y+4	; 0x04
    2df6:	96 89       	ldd	r25, Z+22	; 0x16
    2df8:	80 91 23 03 	lds	r24, 0x0323
    2dfc:	89 17       	cp	r24, r25
    2dfe:	28 f4       	brcc	.+10     	; 0x2e0a <xTaskResumeAll+0x72>
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
    2e04:	86 89       	ldd	r24, Z+22	; 0x16
    2e06:	80 93 23 03 	sts	0x0323, r24
    2e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0e:	86 89       	ldd	r24, Z+22	; 0x16
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	c9 01       	movw	r24, r18
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	82 0f       	add	r24, r18
    2e24:	93 1f       	adc	r25, r19
    2e26:	86 5d       	subi	r24, 0xD6	; 214
    2e28:	9c 4f       	sbci	r25, 0xFC	; 252
    2e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e2e:	2e 5f       	subi	r18, 0xFE	; 254
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	b9 01       	movw	r22, r18
    2e34:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2e38:	eb 81       	ldd	r30, Y+3	; 0x03
    2e3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e3c:	96 89       	ldd	r25, Z+22	; 0x16
    2e3e:	e0 91 1c 03 	lds	r30, 0x031C
    2e42:	f0 91 1d 03 	lds	r31, 0x031D
    2e46:	86 89       	ldd	r24, Z+22	; 0x16
    2e48:	98 17       	cp	r25, r24
    2e4a:	10 f0       	brcs	.+4      	; 0x2e50 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2e50:	80 91 6d 03 	lds	r24, 0x036D
    2e54:	88 23       	and	r24, r24
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <xTaskResumeAll+0xc2>
    2e58:	ba cf       	rjmp	.-140    	; 0x2dce <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2e5a:	80 91 26 03 	lds	r24, 0x0326
    2e5e:	88 23       	and	r24, r24
    2e60:	71 f0       	breq	.+28     	; 0x2e7e <xTaskResumeAll+0xe6>
    2e62:	07 c0       	rjmp	.+14     	; 0x2e72 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2e64:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <vTaskIncrementTick>
						--uxMissedTicks;
    2e68:	80 91 26 03 	lds	r24, 0x0326
    2e6c:	81 50       	subi	r24, 0x01	; 1
    2e6e:	80 93 26 03 	sts	0x0326, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2e72:	80 91 26 03 	lds	r24, 0x0326
    2e76:	88 23       	and	r24, r24
    2e78:	a9 f7       	brne	.-22     	; 0x2e64 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	21 f0       	breq	.+8      	; 0x2e8c <xTaskResumeAll+0xf4>
    2e84:	80 91 27 03 	lds	r24, 0x0327
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	31 f4       	brne	.+12     	; 0x2e98 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2e90:	10 92 27 03 	sts	0x0327, r1
					portYIELD_WITHIN_API();
    2e94:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    2e98:	0f 90       	pop	r0
    2e9a:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <xTaskGetTickCount+0x6>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2ebc:	80 91 20 03 	lds	r24, 0x0320
    2ec0:	90 91 21 03 	lds	r25, 0x0321
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2ec8:	0f 90       	pop	r0
    2eca:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <xTaskGetTickCountFromISR+0x6>
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2ee6:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    2ee8:	80 91 20 03 	lds	r24, 0x0320
    2eec:	90 91 21 03 	lds	r25, 0x0321
    2ef0:	9b 83       	std	Y+3, r25	; 0x03
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2f0c:	80 91 1f 03 	lds	r24, 0x031F
}
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	08 95       	ret

00002f16 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <vTaskIncrementTick+0x6>
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <vTaskIncrementTick+0x8>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <vTaskIncrementTick+0xa>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2f24:	80 91 25 03 	lds	r24, 0x0325
    2f28:	88 23       	and	r24, r24
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <vTaskIncrementTick+0x18>
    2f2c:	bb c0       	rjmp	.+374    	; 0x30a4 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2f2e:	80 91 20 03 	lds	r24, 0x0320
    2f32:	90 91 21 03 	lds	r25, 0x0321
    2f36:	01 96       	adiw	r24, 0x01	; 1
    2f38:	90 93 21 03 	sts	0x0321, r25
    2f3c:	80 93 20 03 	sts	0x0320, r24
		if( xTickCount == ( portTickType ) 0U )
    2f40:	80 91 20 03 	lds	r24, 0x0320
    2f44:	90 91 21 03 	lds	r25, 0x0321
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	d1 f5       	brne	.+116    	; 0x2fc0 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2f4c:	80 91 69 03 	lds	r24, 0x0369
    2f50:	90 91 6a 03 	lds	r25, 0x036A
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2f58:	80 91 6b 03 	lds	r24, 0x036B
    2f5c:	90 91 6c 03 	lds	r25, 0x036C
    2f60:	90 93 6a 03 	sts	0x036A, r25
    2f64:	80 93 69 03 	sts	0x0369, r24
			pxOverflowDelayedTaskList = pxTemp;
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	90 93 6c 03 	sts	0x036C, r25
    2f70:	80 93 6b 03 	sts	0x036B, r24
			xNumOfOverflows++;
    2f74:	80 91 28 03 	lds	r24, 0x0328
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	80 93 28 03 	sts	0x0328, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f7e:	e0 91 69 03 	lds	r30, 0x0369
    2f82:	f0 91 6a 03 	lds	r31, 0x036A
    2f86:	80 81       	ld	r24, Z
    2f88:	88 23       	and	r24, r24
    2f8a:	39 f4       	brne	.+14     	; 0x2f9a <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255
    2f8e:	9f ef       	ldi	r25, 0xFF	; 255
    2f90:	90 93 86 00 	sts	0x0086, r25
    2f94:	80 93 85 00 	sts	0x0085, r24
    2f98:	13 c0       	rjmp	.+38     	; 0x2fc0 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f9a:	e0 91 69 03 	lds	r30, 0x0369
    2f9e:	f0 91 6a 03 	lds	r31, 0x036A
    2fa2:	05 80       	ldd	r0, Z+5	; 0x05
    2fa4:	f6 81       	ldd	r31, Z+6	; 0x06
    2fa6:	e0 2d       	mov	r30, r0
    2fa8:	86 81       	ldd	r24, Z+6	; 0x06
    2faa:	97 81       	ldd	r25, Z+7	; 0x07
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2fb0:	ed 81       	ldd	r30, Y+5	; 0x05
    2fb2:	fe 81       	ldd	r31, Y+6	; 0x06
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	90 93 86 00 	sts	0x0086, r25
    2fbc:	80 93 85 00 	sts	0x0085, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2fc0:	20 91 20 03 	lds	r18, 0x0320
    2fc4:	30 91 21 03 	lds	r19, 0x0321
    2fc8:	80 91 85 00 	lds	r24, 0x0085
    2fcc:	90 91 86 00 	lds	r25, 0x0086
    2fd0:	28 17       	cp	r18, r24
    2fd2:	39 07       	cpc	r19, r25
    2fd4:	08 f4       	brcc	.+2      	; 0x2fd8 <vTaskIncrementTick+0xc2>
    2fd6:	6b c0       	rjmp	.+214    	; 0x30ae <vTaskIncrementTick+0x198>
    2fd8:	e0 91 69 03 	lds	r30, 0x0369
    2fdc:	f0 91 6a 03 	lds	r31, 0x036A
    2fe0:	80 81       	ld	r24, Z
    2fe2:	88 23       	and	r24, r24
    2fe4:	39 f4       	brne	.+14     	; 0x2ff4 <vTaskIncrementTick+0xde>
    2fe6:	8f ef       	ldi	r24, 0xFF	; 255
    2fe8:	9f ef       	ldi	r25, 0xFF	; 255
    2fea:	90 93 86 00 	sts	0x0086, r25
    2fee:	80 93 85 00 	sts	0x0085, r24
    2ff2:	5d c0       	rjmp	.+186    	; 0x30ae <vTaskIncrementTick+0x198>
    2ff4:	e0 91 69 03 	lds	r30, 0x0369
    2ff8:	f0 91 6a 03 	lds	r31, 0x036A
    2ffc:	05 80       	ldd	r0, Z+5	; 0x05
    2ffe:	f6 81       	ldd	r31, Z+6	; 0x06
    3000:	e0 2d       	mov	r30, r0
    3002:	86 81       	ldd	r24, Z+6	; 0x06
    3004:	97 81       	ldd	r25, Z+7	; 0x07
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	8d 83       	std	Y+5, r24	; 0x05
    300a:	ed 81       	ldd	r30, Y+5	; 0x05
    300c:	fe 81       	ldd	r31, Y+6	; 0x06
    300e:	82 81       	ldd	r24, Z+2	; 0x02
    3010:	93 81       	ldd	r25, Z+3	; 0x03
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	20 91 20 03 	lds	r18, 0x0320
    301a:	30 91 21 03 	lds	r19, 0x0321
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	28 17       	cp	r18, r24
    3024:	39 07       	cpc	r19, r25
    3026:	38 f4       	brcc	.+14     	; 0x3036 <vTaskIncrementTick+0x120>
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	90 93 86 00 	sts	0x0086, r25
    3030:	80 93 85 00 	sts	0x0085, r24
    3034:	3c c0       	rjmp	.+120    	; 0x30ae <vTaskIncrementTick+0x198>
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	9e 81       	ldd	r25, Y+6	; 0x06
    303a:	02 96       	adiw	r24, 0x02	; 2
    303c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
    3040:	ed 81       	ldd	r30, Y+5	; 0x05
    3042:	fe 81       	ldd	r31, Y+6	; 0x06
    3044:	84 89       	ldd	r24, Z+20	; 0x14
    3046:	95 89       	ldd	r25, Z+21	; 0x15
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	29 f0       	breq	.+10     	; 0x3056 <vTaskIncrementTick+0x140>
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	0c 96       	adiw	r24, 0x0c	; 12
    3052:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
    3056:	ed 81       	ldd	r30, Y+5	; 0x05
    3058:	fe 81       	ldd	r31, Y+6	; 0x06
    305a:	96 89       	ldd	r25, Z+22	; 0x16
    305c:	80 91 23 03 	lds	r24, 0x0323
    3060:	89 17       	cp	r24, r25
    3062:	28 f4       	brcc	.+10     	; 0x306e <vTaskIncrementTick+0x158>
    3064:	ed 81       	ldd	r30, Y+5	; 0x05
    3066:	fe 81       	ldd	r31, Y+6	; 0x06
    3068:	86 89       	ldd	r24, Z+22	; 0x16
    306a:	80 93 23 03 	sts	0x0323, r24
    306e:	ed 81       	ldd	r30, Y+5	; 0x05
    3070:	fe 81       	ldd	r31, Y+6	; 0x06
    3072:	86 89       	ldd	r24, Z+22	; 0x16
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	c9 01       	movw	r24, r18
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	82 0f       	add	r24, r18
    3088:	93 1f       	adc	r25, r19
    308a:	ac 01       	movw	r20, r24
    308c:	46 5d       	subi	r20, 0xD6	; 214
    308e:	5c 4f       	sbci	r21, 0xFC	; 252
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	9c 01       	movw	r18, r24
    3096:	2e 5f       	subi	r18, 0xFE	; 254
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	ca 01       	movw	r24, r20
    309c:	b9 01       	movw	r22, r18
    309e:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>
    30a2:	9a cf       	rjmp	.-204    	; 0x2fd8 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    30a4:	80 91 26 03 	lds	r24, 0x0326
    30a8:	8f 5f       	subi	r24, 0xFF	; 255
    30aa:	80 93 26 03 	sts	0x0326, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    30ae:	26 96       	adiw	r28, 0x06	; 6
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	00 d0       	rcall	.+0      	; 0x30c6 <vTaskSwitchContext+0x6>
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    30ca:	80 91 25 03 	lds	r24, 0x0325
    30ce:	88 23       	and	r24, r24
    30d0:	49 f0       	breq	.+18     	; 0x30e4 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	80 93 27 03 	sts	0x0327, r24
    30d8:	54 c0       	rjmp	.+168    	; 0x3182 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    30da:	80 91 23 03 	lds	r24, 0x0323
    30de:	81 50       	subi	r24, 0x01	; 1
    30e0:	80 93 23 03 	sts	0x0323, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    30e4:	80 91 23 03 	lds	r24, 0x0323
    30e8:	28 2f       	mov	r18, r24
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	c9 01       	movw	r24, r18
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	fc 01       	movw	r30, r24
    3100:	e6 5d       	subi	r30, 0xD6	; 214
    3102:	fc 4f       	sbci	r31, 0xFC	; 252
    3104:	80 81       	ld	r24, Z
    3106:	88 23       	and	r24, r24
    3108:	41 f3       	breq	.-48     	; 0x30da <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    310a:	80 91 23 03 	lds	r24, 0x0323
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	c9 01       	movw	r24, r18
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	82 0f       	add	r24, r18
    3122:	93 1f       	adc	r25, r19
    3124:	86 5d       	subi	r24, 0xD6	; 214
    3126:	9c 4f       	sbci	r25, 0xFC	; 252
    3128:	9a 83       	std	Y+2, r25	; 0x02
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	e9 81       	ldd	r30, Y+1	; 0x01
    312e:	fa 81       	ldd	r31, Y+2	; 0x02
    3130:	01 80       	ldd	r0, Z+1	; 0x01
    3132:	f2 81       	ldd	r31, Z+2	; 0x02
    3134:	e0 2d       	mov	r30, r0
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	e9 81       	ldd	r30, Y+1	; 0x01
    313c:	fa 81       	ldd	r31, Y+2	; 0x02
    313e:	92 83       	std	Z+2, r25	; 0x02
    3140:	81 83       	std	Z+1, r24	; 0x01
    3142:	e9 81       	ldd	r30, Y+1	; 0x01
    3144:	fa 81       	ldd	r31, Y+2	; 0x02
    3146:	21 81       	ldd	r18, Z+1	; 0x01
    3148:	32 81       	ldd	r19, Z+2	; 0x02
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	03 96       	adiw	r24, 0x03	; 3
    3150:	28 17       	cp	r18, r24
    3152:	39 07       	cpc	r19, r25
    3154:	59 f4       	brne	.+22     	; 0x316c <vTaskSwitchContext+0xac>
    3156:	e9 81       	ldd	r30, Y+1	; 0x01
    3158:	fa 81       	ldd	r31, Y+2	; 0x02
    315a:	01 80       	ldd	r0, Z+1	; 0x01
    315c:	f2 81       	ldd	r31, Z+2	; 0x02
    315e:	e0 2d       	mov	r30, r0
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	92 83       	std	Z+2, r25	; 0x02
    316a:	81 83       	std	Z+1, r24	; 0x01
    316c:	e9 81       	ldd	r30, Y+1	; 0x01
    316e:	fa 81       	ldd	r31, Y+2	; 0x02
    3170:	01 80       	ldd	r0, Z+1	; 0x01
    3172:	f2 81       	ldd	r31, Z+2	; 0x02
    3174:	e0 2d       	mov	r30, r0
    3176:	86 81       	ldd	r24, Z+6	; 0x06
    3178:	97 81       	ldd	r25, Z+7	; 0x07
    317a:	90 93 1d 03 	sts	0x031D, r25
    317e:	80 93 1c 03 	sts	0x031C, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <vTaskPlaceOnEventList+0x6>
    3192:	00 d0       	rcall	.+0      	; 0x3194 <vTaskPlaceOnEventList+0x8>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <vTaskPlaceOnEventList+0xa>
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	9c 83       	std	Y+4, r25	; 0x04
    319c:	8b 83       	std	Y+3, r24	; 0x03
    319e:	7e 83       	std	Y+6, r23	; 0x06
    31a0:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    31a2:	4b 81       	ldd	r20, Y+3	; 0x03
    31a4:	5c 81       	ldd	r21, Y+4	; 0x04
    31a6:	80 91 1c 03 	lds	r24, 0x031C
    31aa:	90 91 1d 03 	lds	r25, 0x031D
    31ae:	9c 01       	movw	r18, r24
    31b0:	24 5f       	subi	r18, 0xF4	; 244
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	ca 01       	movw	r24, r20
    31b6:	b9 01       	movw	r22, r18
    31b8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    31bc:	80 91 1c 03 	lds	r24, 0x031C
    31c0:	90 91 1d 03 	lds	r25, 0x031D
    31c4:	02 96       	adiw	r24, 0x02	; 2
    31c6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    31ca:	20 91 20 03 	lds	r18, 0x0320
    31ce:	30 91 21 03 	lds	r19, 0x0321
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	9e 81       	ldd	r25, Y+6	; 0x06
    31d6:	82 0f       	add	r24, r18
    31d8:	93 1f       	adc	r25, r19
    31da:	9a 83       	std	Y+2, r25	; 0x02
    31dc:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	9a 81       	ldd	r25, Y+2	; 0x02
    31e2:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    31e6:	26 96       	adiw	r28, 0x06	; 6
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <xTaskRemoveFromEventList+0x6>
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <xTaskRemoveFromEventList+0x8>
    3200:	0f 92       	push	r0
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	9d 83       	std	Y+5, r25	; 0x05
    3208:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    320a:	ec 81       	ldd	r30, Y+4	; 0x04
    320c:	fd 81       	ldd	r31, Y+5	; 0x05
    320e:	05 80       	ldd	r0, Z+5	; 0x05
    3210:	f6 81       	ldd	r31, Z+6	; 0x06
    3212:	e0 2d       	mov	r30, r0
    3214:	86 81       	ldd	r24, Z+6	; 0x06
    3216:	97 81       	ldd	r25, Z+7	; 0x07
    3218:	9b 83       	std	Y+3, r25	; 0x03
    321a:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	9b 81       	ldd	r25, Y+3	; 0x03
    3220:	0c 96       	adiw	r24, 0x0c	; 12
    3222:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3226:	80 91 25 03 	lds	r24, 0x0325
    322a:	88 23       	and	r24, r24
    322c:	61 f5       	brne	.+88     	; 0x3286 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	02 96       	adiw	r24, 0x02	; 2
    3234:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3238:	ea 81       	ldd	r30, Y+2	; 0x02
    323a:	fb 81       	ldd	r31, Y+3	; 0x03
    323c:	96 89       	ldd	r25, Z+22	; 0x16
    323e:	80 91 23 03 	lds	r24, 0x0323
    3242:	89 17       	cp	r24, r25
    3244:	28 f4       	brcc	.+10     	; 0x3250 <xTaskRemoveFromEventList+0x58>
    3246:	ea 81       	ldd	r30, Y+2	; 0x02
    3248:	fb 81       	ldd	r31, Y+3	; 0x03
    324a:	86 89       	ldd	r24, Z+22	; 0x16
    324c:	80 93 23 03 	sts	0x0323, r24
    3250:	ea 81       	ldd	r30, Y+2	; 0x02
    3252:	fb 81       	ldd	r31, Y+3	; 0x03
    3254:	86 89       	ldd	r24, Z+22	; 0x16
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	c9 01       	movw	r24, r18
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	82 0f       	add	r24, r18
    326a:	93 1f       	adc	r25, r19
    326c:	ac 01       	movw	r20, r24
    326e:	46 5d       	subi	r20, 0xD6	; 214
    3270:	5c 4f       	sbci	r21, 0xFC	; 252
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	9b 81       	ldd	r25, Y+3	; 0x03
    3276:	9c 01       	movw	r18, r24
    3278:	2e 5f       	subi	r18, 0xFE	; 254
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	ca 01       	movw	r24, r20
    327e:	b9 01       	movw	r22, r18
    3280:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>
    3284:	0a c0       	rjmp	.+20     	; 0x329a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	9c 01       	movw	r18, r24
    328c:	24 5f       	subi	r18, 0xF4	; 244
    328e:	3f 4f       	sbci	r19, 0xFF	; 255
    3290:	8d e6       	ldi	r24, 0x6D	; 109
    3292:	93 e0       	ldi	r25, 0x03	; 3
    3294:	b9 01       	movw	r22, r18
    3296:	0e 94 30 0c 	call	0x1860	; 0x1860 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    329a:	ea 81       	ldd	r30, Y+2	; 0x02
    329c:	fb 81       	ldd	r31, Y+3	; 0x03
    329e:	96 89       	ldd	r25, Z+22	; 0x16
    32a0:	e0 91 1c 03 	lds	r30, 0x031C
    32a4:	f0 91 1d 03 	lds	r31, 0x031D
    32a8:	86 89       	ldd	r24, Z+22	; 0x16
    32aa:	98 17       	cp	r25, r24
    32ac:	18 f0       	brcs	.+6      	; 0x32b4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	01 c0       	rjmp	.+2      	; 0x32b6 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    32b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <vTaskSetTimeOutState+0x6>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    32d6:	80 91 28 03 	lds	r24, 0x0328
    32da:	e9 81       	ldd	r30, Y+1	; 0x01
    32dc:	fa 81       	ldd	r31, Y+2	; 0x02
    32de:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    32e0:	80 91 20 03 	lds	r24, 0x0320
    32e4:	90 91 21 03 	lds	r25, 0x0321
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	92 83       	std	Z+2, r25	; 0x02
    32ee:	81 83       	std	Z+1, r24	; 0x01
}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <xTaskCheckForTimeOut+0x6>
    3300:	00 d0       	rcall	.+0      	; 0x3302 <xTaskCheckForTimeOut+0x8>
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	9b 83       	std	Y+3, r25	; 0x03
    330a:	8a 83       	std	Y+2, r24	; 0x02
    330c:	7d 83       	std	Y+5, r23	; 0x05
    330e:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3316:	ea 81       	ldd	r30, Y+2	; 0x02
    3318:	fb 81       	ldd	r31, Y+3	; 0x03
    331a:	90 81       	ld	r25, Z
    331c:	80 91 28 03 	lds	r24, 0x0328
    3320:	98 17       	cp	r25, r24
    3322:	71 f0       	breq	.+28     	; 0x3340 <xTaskCheckForTimeOut+0x46>
    3324:	ea 81       	ldd	r30, Y+2	; 0x02
    3326:	fb 81       	ldd	r31, Y+3	; 0x03
    3328:	21 81       	ldd	r18, Z+1	; 0x01
    332a:	32 81       	ldd	r19, Z+2	; 0x02
    332c:	80 91 20 03 	lds	r24, 0x0320
    3330:	90 91 21 03 	lds	r25, 0x0321
    3334:	82 17       	cp	r24, r18
    3336:	93 07       	cpc	r25, r19
    3338:	18 f0       	brcs	.+6      	; 0x3340 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	2f c0       	rjmp	.+94     	; 0x339e <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3340:	20 91 20 03 	lds	r18, 0x0320
    3344:	30 91 21 03 	lds	r19, 0x0321
    3348:	ea 81       	ldd	r30, Y+2	; 0x02
    334a:	fb 81       	ldd	r31, Y+3	; 0x03
    334c:	81 81       	ldd	r24, Z+1	; 0x01
    334e:	92 81       	ldd	r25, Z+2	; 0x02
    3350:	28 1b       	sub	r18, r24
    3352:	39 0b       	sbc	r19, r25
    3354:	ec 81       	ldd	r30, Y+4	; 0x04
    3356:	fd 81       	ldd	r31, Y+5	; 0x05
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	28 17       	cp	r18, r24
    335e:	39 07       	cpc	r19, r25
    3360:	e0 f4       	brcc	.+56     	; 0x339a <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3362:	ec 81       	ldd	r30, Y+4	; 0x04
    3364:	fd 81       	ldd	r31, Y+5	; 0x05
    3366:	40 81       	ld	r20, Z
    3368:	51 81       	ldd	r21, Z+1	; 0x01
    336a:	ea 81       	ldd	r30, Y+2	; 0x02
    336c:	fb 81       	ldd	r31, Y+3	; 0x03
    336e:	21 81       	ldd	r18, Z+1	; 0x01
    3370:	32 81       	ldd	r19, Z+2	; 0x02
    3372:	80 91 20 03 	lds	r24, 0x0320
    3376:	90 91 21 03 	lds	r25, 0x0321
    337a:	b9 01       	movw	r22, r18
    337c:	68 1b       	sub	r22, r24
    337e:	79 0b       	sbc	r23, r25
    3380:	cb 01       	movw	r24, r22
    3382:	84 0f       	add	r24, r20
    3384:	95 1f       	adc	r25, r21
    3386:	ec 81       	ldd	r30, Y+4	; 0x04
    3388:	fd 81       	ldd	r31, Y+5	; 0x05
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	0e 94 64 19 	call	0x32c8	; 0x32c8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3396:	19 82       	std	Y+1, r1	; 0x01
    3398:	02 c0       	rjmp	.+4      	; 0x339e <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    339e:	0f 90       	pop	r0
    33a0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	80 93 27 03 	sts	0x0327, r24
}
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <prvIdleTask+0x6>
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	9a 83       	std	Y+2, r25	; 0x02
    33d4:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    33d6:	0e 94 82 1a 	call	0x3504	; 0x3504 <prvCheckTasksWaitingTermination>
    33da:	fd cf       	rjmp	.-6      	; 0x33d6 <prvIdleTask+0xe>

000033dc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    33e8:	29 97       	sbiw	r28, 0x09	; 9
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	7c 83       	std	Y+4, r23	; 0x04
    33fa:	6b 83       	std	Y+3, r22	; 0x03
    33fc:	4d 83       	std	Y+5, r20	; 0x05
    33fe:	3f 83       	std	Y+7, r19	; 0x07
    3400:	2e 83       	std	Y+6, r18	; 0x06
    3402:	19 87       	std	Y+9, r17	; 0x09
    3404:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	49 96       	adiw	r24, 0x19	; 25
    340c:	2b 81       	ldd	r18, Y+3	; 0x03
    340e:	3c 81       	ldd	r19, Y+4	; 0x04
    3410:	b9 01       	movw	r22, r18
    3412:	48 e0       	ldi	r20, 0x08	; 8
    3414:	50 e0       	ldi	r21, 0x00	; 0
    3416:	0e 94 b6 1b 	call	0x376c	; 0x376c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    341a:	e9 81       	ldd	r30, Y+1	; 0x01
    341c:	fa 81       	ldd	r31, Y+2	; 0x02
    341e:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	85 30       	cpi	r24, 0x05	; 5
    3424:	10 f0       	brcs	.+4      	; 0x342a <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3426:	84 e0       	ldi	r24, 0x04	; 4
    3428:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    342a:	e9 81       	ldd	r30, Y+1	; 0x01
    342c:	fa 81       	ldd	r31, Y+2	; 0x02
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	9a 81       	ldd	r25, Y+2	; 0x02
    3436:	02 96       	adiw	r24, 0x02	; 2
    3438:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	9a 81       	ldd	r25, Y+2	; 0x02
    3440:	0c 96       	adiw	r24, 0x0c	; 12
    3442:	0e 94 20 0c 	call	0x1840	; 0x1840 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3446:	e9 81       	ldd	r30, Y+1	; 0x01
    3448:	fa 81       	ldd	r31, Y+2	; 0x02
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	91 87       	std	Z+9, r25	; 0x09
    3450:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	85 e0       	ldi	r24, 0x05	; 5
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	82 1b       	sub	r24, r18
    345e:	93 0b       	sbc	r25, r19
    3460:	e9 81       	ldd	r30, Y+1	; 0x01
    3462:	fa 81       	ldd	r31, Y+2	; 0x02
    3464:	95 87       	std	Z+13, r25	; 0x0d
    3466:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3468:	e9 81       	ldd	r30, Y+1	; 0x01
    346a:	fa 81       	ldd	r31, Y+2	; 0x02
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	93 8b       	std	Z+19, r25	; 0x13
    3472:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    3474:	29 96       	adiw	r28, 0x09	; 9
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	08 95       	ret

0000348a <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	0f 92       	push	r0
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    3494:	19 82       	std	Y+1, r1	; 0x01
    3496:	13 c0       	rjmp	.+38     	; 0x34be <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	28 2f       	mov	r18, r24
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	c9 01       	movw	r24, r18
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	82 0f       	add	r24, r18
    34ae:	93 1f       	adc	r25, r19
    34b0:	86 5d       	subi	r24, 0xD6	; 214
    34b2:	9c 4f       	sbci	r25, 0xFC	; 252
    34b4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	85 30       	cpi	r24, 0x05	; 5
    34c2:	50 f3       	brcs	.-44     	; 0x3498 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    34c4:	87 e5       	ldi	r24, 0x57	; 87
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    34cc:	80 e6       	ldi	r24, 0x60	; 96
    34ce:	93 e0       	ldi	r25, 0x03	; 3
    34d0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    34d4:	8d e6       	ldi	r24, 0x6D	; 109
    34d6:	93 e0       	ldi	r25, 0x03	; 3
    34d8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    34dc:	86 e7       	ldi	r24, 0x76	; 118
    34de:	93 e0       	ldi	r25, 0x03	; 3
    34e0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    34e4:	87 e5       	ldi	r24, 0x57	; 87
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	90 93 6a 03 	sts	0x036A, r25
    34ec:	80 93 69 03 	sts	0x0369, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    34f0:	80 e6       	ldi	r24, 0x60	; 96
    34f2:	93 e0       	ldi	r25, 0x03	; 3
    34f4:	90 93 6c 03 	sts	0x036C, r25
    34f8:	80 93 6b 03 	sts	0x036B, r24
}
    34fc:	0f 90       	pop	r0
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	00 d0       	rcall	.+0      	; 0x350a <prvCheckTasksWaitingTermination+0x6>
    350a:	0f 92       	push	r0
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    3510:	80 91 1e 03 	lds	r24, 0x031E
    3514:	88 23       	and	r24, r24
    3516:	71 f1       	breq	.+92     	; 0x3574 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    3518:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    351c:	80 91 76 03 	lds	r24, 0x0376
    3520:	1b 82       	std	Y+3, r1	; 0x03
    3522:	88 23       	and	r24, r24
    3524:	11 f4       	brne	.+4      	; 0x352a <prvCheckTasksWaitingTermination+0x26>
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    352a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	88 23       	and	r24, r24
    3532:	01 f5       	brne	.+64     	; 0x3574 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    353a:	e0 91 7b 03 	lds	r30, 0x037B
    353e:	f0 91 7c 03 	lds	r31, 0x037C
    3542:	86 81       	ldd	r24, Z+6	; 0x06
    3544:	97 81       	ldd	r25, Z+7	; 0x07
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	9a 81       	ldd	r25, Y+2	; 0x02
    354e:	02 96       	adiw	r24, 0x02	; 2
    3550:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <vListRemove>
					--uxCurrentNumberOfTasks;
    3554:	80 91 1f 03 	lds	r24, 0x031F
    3558:	81 50       	subi	r24, 0x01	; 1
    355a:	80 93 1f 03 	sts	0x031F, r24
					--uxTasksDeleted;
    355e:	80 91 1e 03 	lds	r24, 0x031E
    3562:	81 50       	subi	r24, 0x01	; 1
    3564:	80 93 1e 03 	sts	0x031E, r24
				}
				taskEXIT_CRITICAL();
    3568:	0f 90       	pop	r0
    356a:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	9a 81       	ldd	r25, Y+2	; 0x02
    3570:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <prvAddCurrentTaskToDelayedList+0x6>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    358e:	e0 91 1c 03 	lds	r30, 0x031C
    3592:	f0 91 1d 03 	lds	r31, 0x031D
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	93 83       	std	Z+3, r25	; 0x03
    359c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    359e:	20 91 20 03 	lds	r18, 0x0320
    35a2:	30 91 21 03 	lds	r19, 0x0321
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	9a 81       	ldd	r25, Y+2	; 0x02
    35aa:	82 17       	cp	r24, r18
    35ac:	93 07       	cpc	r25, r19
    35ae:	70 f4       	brcc	.+28     	; 0x35cc <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35b0:	80 91 6b 03 	lds	r24, 0x036B
    35b4:	90 91 6c 03 	lds	r25, 0x036C
    35b8:	20 91 1c 03 	lds	r18, 0x031C
    35bc:	30 91 1d 03 	lds	r19, 0x031D
    35c0:	2e 5f       	subi	r18, 0xFE	; 254
    35c2:	3f 4f       	sbci	r19, 0xFF	; 255
    35c4:	b9 01       	movw	r22, r18
    35c6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vListInsert>
    35ca:	1e c0       	rjmp	.+60     	; 0x3608 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35cc:	40 91 69 03 	lds	r20, 0x0369
    35d0:	50 91 6a 03 	lds	r21, 0x036A
    35d4:	80 91 1c 03 	lds	r24, 0x031C
    35d8:	90 91 1d 03 	lds	r25, 0x031D
    35dc:	9c 01       	movw	r18, r24
    35de:	2e 5f       	subi	r18, 0xFE	; 254
    35e0:	3f 4f       	sbci	r19, 0xFF	; 255
    35e2:	ca 01       	movw	r24, r20
    35e4:	b9 01       	movw	r22, r18
    35e6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    35ea:	20 91 85 00 	lds	r18, 0x0085
    35ee:	30 91 86 00 	lds	r19, 0x0086
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	82 17       	cp	r24, r18
    35f8:	93 07       	cpc	r25, r19
    35fa:	30 f4       	brcc	.+12     	; 0x3608 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3600:	90 93 86 00 	sts	0x0086, r25
    3604:	80 93 85 00 	sts	0x0085, r24
		}
	}
}
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	28 97       	sbiw	r28, 0x08	; 8
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	9c 83       	std	Y+4, r25	; 0x04
    3628:	8b 83       	std	Y+3, r24	; 0x03
    362a:	7e 83       	std	Y+6, r23	; 0x06
    362c:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    362e:	81 e2       	ldi	r24, 0x21	; 33
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	0e 94 53 09 	call	0x12a6	; 0x12a6 <pvPortMalloc>
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	69 f1       	breq	.+90     	; 0x369c <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	39 f4       	brne	.+14     	; 0x3658 <prvAllocateTCBAndStack+0x46>
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <pvPortMalloc>
    3652:	98 87       	std	Y+8, r25	; 0x08
    3654:	8f 83       	std	Y+7, r24	; 0x07
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <prvAllocateTCBAndStack+0x4e>
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	98 87       	std	Y+8, r25	; 0x08
    365e:	8f 83       	std	Y+7, r24	; 0x07
    3660:	e9 81       	ldd	r30, Y+1	; 0x01
    3662:	fa 81       	ldd	r31, Y+2	; 0x02
    3664:	8f 81       	ldd	r24, Y+7	; 0x07
    3666:	98 85       	ldd	r25, Y+8	; 0x08
    3668:	90 8f       	std	Z+24, r25	; 0x18
    366a:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    366c:	e9 81       	ldd	r30, Y+1	; 0x01
    366e:	fa 81       	ldd	r31, Y+2	; 0x02
    3670:	87 89       	ldd	r24, Z+23	; 0x17
    3672:	90 8d       	ldd	r25, Z+24	; 0x18
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	39 f4       	brne	.+14     	; 0x3686 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	0e 94 99 09 	call	0x1332	; 0x1332 <vPortFree>
			pxNewTCB = NULL;
    3680:	1a 82       	std	Y+2, r1	; 0x02
    3682:	19 82       	std	Y+1, r1	; 0x01
    3684:	0b c0       	rjmp	.+22     	; 0x369c <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    3686:	e9 81       	ldd	r30, Y+1	; 0x01
    3688:	fa 81       	ldd	r31, Y+2	; 0x02
    368a:	87 89       	ldd	r24, Z+23	; 0x17
    368c:	90 8d       	ldd	r25, Z+24	; 0x18
    368e:	2b 81       	ldd	r18, Y+3	; 0x03
    3690:	3c 81       	ldd	r19, Y+4	; 0x04
    3692:	65 ea       	ldi	r22, 0xA5	; 165
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	a9 01       	movw	r20, r18
    3698:	0e 94 af 1b 	call	0x375e	; 0x375e <memset>
		}
	}

	return pxNewTCB;
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    36a0:	28 96       	adiw	r28, 0x08	; 8
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	00 d0       	rcall	.+0      	; 0x36b8 <prvDeleteTCB+0x6>
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    36c0:	e9 81       	ldd	r30, Y+1	; 0x01
    36c2:	fa 81       	ldd	r31, Y+2	; 0x02
    36c4:	87 89       	ldd	r24, Z+23	; 0x17
    36c6:	90 8d       	ldd	r25, Z+24	; 0x18
    36c8:	0e 94 99 09 	call	0x1332	; 0x1332 <vPortFree>
		vPortFree( pxTCB );
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	0e 94 99 09 	call	0x1332	; 0x1332 <vPortFree>
	}
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <__prologue_saves__>:
    36de:	2f 92       	push	r2
    36e0:	3f 92       	push	r3
    36e2:	4f 92       	push	r4
    36e4:	5f 92       	push	r5
    36e6:	6f 92       	push	r6
    36e8:	7f 92       	push	r7
    36ea:	8f 92       	push	r8
    36ec:	9f 92       	push	r9
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	ca 1b       	sub	r28, r26
    3708:	db 0b       	sbc	r29, r27
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	09 94       	ijmp

00003716 <__epilogue_restores__>:
    3716:	2a 88       	ldd	r2, Y+18	; 0x12
    3718:	39 88       	ldd	r3, Y+17	; 0x11
    371a:	48 88       	ldd	r4, Y+16	; 0x10
    371c:	5f 84       	ldd	r5, Y+15	; 0x0f
    371e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3720:	7d 84       	ldd	r7, Y+13	; 0x0d
    3722:	8c 84       	ldd	r8, Y+12	; 0x0c
    3724:	9b 84       	ldd	r9, Y+11	; 0x0b
    3726:	aa 84       	ldd	r10, Y+10	; 0x0a
    3728:	b9 84       	ldd	r11, Y+9	; 0x09
    372a:	c8 84       	ldd	r12, Y+8	; 0x08
    372c:	df 80       	ldd	r13, Y+7	; 0x07
    372e:	ee 80       	ldd	r14, Y+6	; 0x06
    3730:	fd 80       	ldd	r15, Y+5	; 0x05
    3732:	0c 81       	ldd	r16, Y+4	; 0x04
    3734:	1b 81       	ldd	r17, Y+3	; 0x03
    3736:	aa 81       	ldd	r26, Y+2	; 0x02
    3738:	b9 81       	ldd	r27, Y+1	; 0x01
    373a:	ce 0f       	add	r28, r30
    373c:	d1 1d       	adc	r29, r1
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	ed 01       	movw	r28, r26
    374a:	08 95       	ret

0000374c <memcpy>:
    374c:	fb 01       	movw	r30, r22
    374e:	dc 01       	movw	r26, r24
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <memcpy+0xa>
    3752:	01 90       	ld	r0, Z+
    3754:	0d 92       	st	X+, r0
    3756:	41 50       	subi	r20, 0x01	; 1
    3758:	50 40       	sbci	r21, 0x00	; 0
    375a:	d8 f7       	brcc	.-10     	; 0x3752 <memcpy+0x6>
    375c:	08 95       	ret

0000375e <memset>:
    375e:	dc 01       	movw	r26, r24
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <memset+0x6>
    3762:	6d 93       	st	X+, r22
    3764:	41 50       	subi	r20, 0x01	; 1
    3766:	50 40       	sbci	r21, 0x00	; 0
    3768:	e0 f7       	brcc	.-8      	; 0x3762 <memset+0x4>
    376a:	08 95       	ret

0000376c <strncpy>:
    376c:	fb 01       	movw	r30, r22
    376e:	dc 01       	movw	r26, r24
    3770:	41 50       	subi	r20, 0x01	; 1
    3772:	50 40       	sbci	r21, 0x00	; 0
    3774:	48 f0       	brcs	.+18     	; 0x3788 <strncpy+0x1c>
    3776:	01 90       	ld	r0, Z+
    3778:	0d 92       	st	X+, r0
    377a:	00 20       	and	r0, r0
    377c:	c9 f7       	brne	.-14     	; 0x3770 <strncpy+0x4>
    377e:	01 c0       	rjmp	.+2      	; 0x3782 <strncpy+0x16>
    3780:	1d 92       	st	X+, r1
    3782:	41 50       	subi	r20, 0x01	; 1
    3784:	50 40       	sbci	r21, 0x00	; 0
    3786:	e0 f7       	brcc	.-8      	; 0x3780 <strncpy+0x14>
    3788:	08 95       	ret

0000378a <_exit>:
    378a:	f8 94       	cli

0000378c <__stop_program>:
    378c:	ff cf       	rjmp	.-2      	; 0x378c <__stop_program>
